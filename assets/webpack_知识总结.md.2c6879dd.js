import{_ as e,c as l,o as a,d as i}from"./app.f1dc7af0.js";const o=JSON.parse('{"title":"webpack知识总结","description":"","frontmatter":{},"headers":[{"level":2,"title":"什么是webpack","slug":"什么是webpack","link":"#什么是webpack","children":[]},{"level":2,"title":"webpack的打包流程（原理）","slug":"webpack的打包流程-原理","link":"#webpack的打包流程-原理","children":[]},{"level":2,"title":"bundle、chunk、Module","slug":"bundle、chunk、module","link":"#bundle、chunk、module","children":[]},{"level":2,"title":"常见的loader","slug":"常见的loader","link":"#常见的loader","children":[]},{"level":2,"title":"常见的plugin","slug":"常见的plugin","link":"#常见的plugin","children":[]},{"level":2,"title":"plugin和loader的区别","slug":"plugin和loader的区别","link":"#plugin和loader的区别","children":[]},{"level":2,"title":"什么是 Tree-shaking ? css可以使用吗 ？","slug":"什么是-tree-shaking-css可以使用吗","link":"#什么是-tree-shaking-css可以使用吗","children":[]},{"level":2,"title":"webpack中babel的原理","slug":"webpack中babel的原理","link":"#webpack中babel的原理","children":[]},{"level":2,"title":"如何提高webpack的构建速度","slug":"如何提高webpack的构建速度","link":"#如何提高webpack的构建速度","children":[]},{"level":2,"title":"webpack优化前端性能（webpack打包后文件还是很大怎么办？？）","slug":"webpack优化前端性能-webpack打包后文件还是很大怎么办","link":"#webpack优化前端性能-webpack打包后文件还是很大怎么办","children":[]},{"level":2,"title":"webpack中如何解决跨域问题","slug":"webpack中如何解决跨域问题","link":"#webpack中如何解决跨域问题","children":[]},{"level":2,"title":"webpack的路由懒加载","slug":"webpack的路由懒加载","link":"#webpack的路由懒加载","children":[]},{"level":2,"title":"webpack的代码分割和魔法注释","slug":"webpack的代码分割和魔法注释","link":"#webpack的代码分割和魔法注释","children":[]},{"level":2,"title":"webpack如何处理ES6语法","slug":"webpack如何处理es6语法","link":"#webpack如何处理es6语法","children":[]},{"level":2,"title":"webpack如何优化长缓存","slug":"webpack如何优化长缓存","link":"#webpack如何优化长缓存","children":[]},{"level":2,"title":"webpack-dev-server和http服务器","slug":"webpack-dev-server和http服务器","link":"#webpack-dev-server和http服务器","children":[]},{"level":2,"title":"webpack和vite的区别","slug":"webpack和vite的区别","link":"#webpack和vite的区别","children":[]}],"relativePath":"webpack/知识总结.md"}'),c={name:"webpack/知识总结.md"},r=i('<h1 id="webpack知识总结" tabindex="-1">webpack知识总结 <a class="header-anchor" href="#webpack知识总结" aria-hidden="true">#</a></h1><h2 id="什么是webpack" tabindex="-1">什么是webpack <a class="header-anchor" href="#什么是webpack" aria-hidden="true">#</a></h2><ul><li>是一个js应用程序的静态模块打包工具</li><li>在处理应用程序时，他会在内部构建一个各个模块的依赖图，最后打包成一个或者多个bundle</li></ul><h2 id="webpack的打包流程-原理" tabindex="-1">webpack的打包流程（原理） <a class="header-anchor" href="#webpack的打包流程-原理" aria-hidden="true">#</a></h2><h5 id="一、初始化参数" tabindex="-1">一、初始化参数 <a class="header-anchor" href="#一、初始化参数" aria-hidden="true">#</a></h5><ol><li>初始化需要使用的插件和配置插件等执行环境的参数</li></ol><h5 id="二、编译构建" tabindex="-1">二、编译构建 <a class="header-anchor" href="#二、编译构建" aria-hidden="true">#</a></h5><ol><li>entry出发，针对每个module调用对应的loader编译文件内容</li><li>再找该module依赖的module，递归进行编译处理</li></ol><h5 id="三、输出流程" tabindex="-1">三、输出流程 <a class="header-anchor" href="#三、输出流程" aria-hidden="true">#</a></h5><ol><li>对编译后的module组合成chunk，把chunk转化成文件加入输出列表，这是可以修改输出内容的最后机会</li></ol><h5 id="四、输出完成" tabindex="-1">四、输出完成 <a class="header-anchor" href="#四、输出完成" aria-hidden="true">#</a></h5><ol><li>确定好输出内容，根据配置确定输出路径和文件名，把文件内容写到文件系统</li></ol><h2 id="bundle、chunk、module" tabindex="-1">bundle、chunk、Module <a class="header-anchor" href="#bundle、chunk、module" aria-hidden="true">#</a></h2><ol><li>bundle是webpack打包出来的文件</li><li>chunk 是webpack在进行模块的以依赖分析时候，代码分割出来的代码块</li><li>module 是开发中的单个模块</li></ol><h2 id="常见的loader" tabindex="-1">常见的loader <a class="header-anchor" href="#常见的loader" aria-hidden="true">#</a></h2><ol><li>css-loader：加载css、</li><li>style-loader：把css注入js中，通过dom去操作css</li><li>ts-loader：把ts转换成js</li></ol><h2 id="常见的plugin" tabindex="-1">常见的plugin <a class="header-anchor" href="#常见的plugin" aria-hidden="true">#</a></h2><ol><li>define-plugin：定义环境变量</li><li>commons-chunk-plugin：提取公共代码</li><li>uglifyjs-webpack-plugin：压缩es6代码</li></ol><h2 id="plugin和loader的区别" tabindex="-1">plugin和loader的区别 <a class="header-anchor" href="#plugin和loader的区别" aria-hidden="true">#</a></h2><ol><li>loader本质是一个转换器，让webpack拥有处理非js文件的能力，比如：把less编译成css，运行在打包文件之前</li><li>plugin是扩展插件，让webpack有更丰富灵活的功能，在整个编译周期都起作用</li></ol><h2 id="什么是-tree-shaking-css可以使用吗" tabindex="-1">什么是 Tree-shaking ? css可以使用吗 ？ <a class="header-anchor" href="#什么是-tree-shaking-css可以使用吗" aria-hidden="true">#</a></h2><ul><li>打包中去除那些引入了，但是在项目中没有被用到的代码</li><li>webpack中Tree-shaking是通过uglifySPlugin来Tree-shaking JS</li><li>Css需要使用PurgeCSS.</li></ul><h2 id="webpack中babel的原理" tabindex="-1">webpack中babel的原理 <a class="header-anchor" href="#webpack中babel的原理" aria-hidden="true">#</a></h2><ol><li>parse：第一步是babel使用babylon将原始代码转换为抽象语法树</li><li>transform：第二步是babel通过babel-traverse对前面的抽象语法树进行遍历修改并获得新的抽象语法树</li><li>generator：第三步是babel使用babel-generator将抽象语法树转换为代码</li></ol><h2 id="如何提高webpack的构建速度" tabindex="-1">如何提高webpack的构建速度 <a class="header-anchor" href="#如何提高webpack的构建速度" aria-hidden="true">#</a></h2><ol><li>多入口的情况下，用SplitChunksPlugin 来提取公共代码</li><li>通过 externals 配置提取常用库。哪些模块不需要打包</li><li>使用happypack 实现多线程加速编译</li><li>使用webpack-uglify-parallel来提升uglifyPlugin的压缩速度。 原理上webpack-uglify-parallel采用了多核并行压缩来提升压缩速度</li><li>使用tree-shaking</li></ol><h2 id="webpack优化前端性能-webpack打包后文件还是很大怎么办" tabindex="-1">webpack优化前端性能（webpack打包后文件还是很大怎么办？？） <a class="header-anchor" href="#webpack优化前端性能-webpack打包后文件还是很大怎么办" aria-hidden="true">#</a></h2><ol><li>提取公共代码：SplitChunksPlugin或者DLLplugin、DLLReferencePlugin配合使用</li><li>压缩代码（UglifyJsPlugin）, webpack4使用production模式会自动开启代码压缩</li><li>使用loader的时候，使用exclude排除node_modules中的文件</li><li>抽离css样单独打包（使用extractTextWebpackPlugin插件）</li><li>使用TreeShaking，删除死代码</li><li>优化图片，对小图片可以使用 base64 的方式写入文件中</li><li>配置production环境。按照prodution的方式打包</li></ol><h2 id="webpack中如何解决跨域问题" tabindex="-1">webpack中如何解决跨域问题 <a class="header-anchor" href="#webpack中如何解决跨域问题" aria-hidden="true">#</a></h2><ul><li>在webpack 配置对象属性中通过 devServer 属性来配置，其中的proxy就是配置代理的属性</li><li>proxy 工作原理实质上是利用 http-proxy-middleware 这个http代理中间件，实现请求转发给其他服务器</li><li>服务器之间的通信是不会跨域的 3# 如何配置单页面应用和多个单页面应用</li><li>单页面： a. entry 配置一个入口 b. 利用 HtmlWebpackPlugin 插件，会创建一个空的html，引入打包输出的所有资源</li><li>多个单页面： a. entry 配置多个入口 b. 利用 AutoWebPlugin ，会自动为所有页面入口生成对应的html</li></ul><h2 id="webpack的路由懒加载" tabindex="-1">webpack的路由懒加载 <a class="header-anchor" href="#webpack的路由懒加载" aria-hidden="true">#</a></h2><ol><li>借助 ES6 的import()语法配置动态按需加载，某中程度上是代码的分割，会生成多个chunk.JS</li><li>结合vue-router的异步加载路由</li></ol><h2 id="webpack的代码分割和魔法注释" tabindex="-1">webpack的代码分割和魔法注释 <a class="header-anchor" href="#webpack的代码分割和魔法注释" aria-hidden="true">#</a></h2><ul><li>代码分割：将脚本中无需立即调用的代码在代码构建时转变为异步加载的过程，解决打包出来的代码体积过大的问题 a. entry配置多个入口，但是如果入口chunks之间包含重复的模块，那些模块都会被引入到各个bundle中 b. SplitChunksPlugin，可以抽取所有文件都依赖了的模块，把这些模块抽取成一个心的bundle c. 使用import()语法动态分割，</li><li>魔法注释：webpack提供的，为代码分割服务的一种技术，通过在import后的括号中使用指定注释，可以对分离出来的chunk进行命名</li></ul><h2 id="webpack如何处理es6语法" tabindex="-1">webpack如何处理ES6语法 <a class="header-anchor" href="#webpack如何处理es6语法" aria-hidden="true">#</a></h2><ul><li>使用babel，注意 babel-loader 只是提供 webpack 和 babel 沟通的桥梁，@babel/preset-env 才是转义es6的</li><li>使用@babel/preset-env，但是默认的babel只能处理一些基础语法，像promise等特性无法转换。</li><li>要借助@babel/polyfill，把所有es特性装进来，全部装进来又会打包体积有点大，可以配置useBuiltIns按需注入</li></ul><h2 id="webpack如何优化长缓存" tabindex="-1">webpack如何优化长缓存 <a class="header-anchor" href="#webpack如何优化长缓存" aria-hidden="true">#</a></h2><ul><li>浏览器请求资源会缓存静态资源，我们希望代码更新时，浏览器只重新下载代码改变的部分</li><li>webpack优化： a. 文件不随编译变化： <ul><li>文件hash不使用[hash]，用 [chunkhash],使得文件hash只随内容改变，不随编译变化 b. css文件不受js模块变化：</li><li>css文件hash使用contenthash，这样不受js模块变化影响 c. 提取vendor：</li><li>第三方库不受业务模块变化影响 d. 保证module ID 稳定：</li><li>模块增删会影响后面所有模块的id重新排序，使用文件hsah值作为模块id可以避免这个问题，使用 HashedModuleIdsPlugin e. 保证 chunkhash 稳定：</li><li>使用webpack-chunk-hash，替代webpack自己的hash算法。webpack自己的hash算法，对于同一个文件，在不同开发环境下，会计算出不用的hash值，不能满足跨平台需求</li></ul></li></ul><h2 id="webpack-dev-server和http服务器" tabindex="-1">webpack-dev-server和http服务器 <a class="header-anchor" href="#webpack-dev-server和http服务器" aria-hidden="true">#</a></h2><ol><li>webpack-dev-server使用内存来存储webpack开发环境下的打包文件，可以使用模块热更新，比传统的服务器更高效</li></ol><h5 id="webpack的模块热更新-hot-module-replacement" tabindex="-1">webpack的模块热更新（hot module replacement） <a class="header-anchor" href="#webpack的模块热更新-hot-module-replacement" aria-hidden="true">#</a></h5><ul><li>使得代码修改过后不用刷新浏览器就可以更新页面还可以保存页面的状态，比如：输入框输入的内容</li><li>原理： <ul><li>webpack-dev-middleware 中间件调用webpack暴露的api对代码监控， watch监听文件变化后重新编译打包存入到内存中（读取比存入文件系统中速度快），通过sockjs（webpack-dev-server的依赖）在浏览器和服务端建立 websocket 长连接，服务端传递最新的hash值给客户端时，客户端就会向服务端发送ajax请求获取到所有更新的模块，然后和旧模块对比进行HMR</li></ul></li></ul><h5 id="webpack遵循什么规范" tabindex="-1">webpack遵循什么规范 <a class="header-anchor" href="#webpack遵循什么规范" aria-hidden="true">#</a></h5><ul><li>CommonJS规范和AMD规范</li></ul><h2 id="webpack和vite的区别" tabindex="-1">webpack和vite的区别 <a class="header-anchor" href="#webpack和vite的区别" aria-hidden="true">#</a></h2><ol><li>webpack会先打包，然后启动开发服务器，请求服务器时直接打包结果</li><li>vite是直接启动开发服务器，不需要打包，就不需要分析模块的依赖，请求哪个模块再对该模块进行实时编译</li><li>现代浏览器本身支持 ES Module，会自动向依赖的 Module 发出请求</li><li>在HMR方面，当改动一个模块后，仅让浏览器重新请求该模块即可</li><li>打包到生产环境时，vite使用rollup进行打包，所以vite的优势主要在开发阶段</li><li>vite利用的是ES Module 在代码中不可以使用 common JS</li></ol>',46),h=[r];function d(n,b,s,t,p,k){return a(),l("div",null,h)}const w=e(c,[["render",d]]);export{o as __pageData,w as default};
