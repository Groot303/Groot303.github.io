import{_ as e,c as l,o as a,d as s}from"./app.cec77ba5.js";const A=JSON.parse('{"title":"React 基础知识总结","description":"","frontmatter":{},"headers":[{"level":2,"title":"jsx","slug":"jsx","link":"#jsx","children":[]},{"level":2,"title":"自定义组件首字母大写","slug":"自定义组件首字母大写","link":"#自定义组件首字母大写","children":[]},{"level":2,"title":"组件只有一个根节点","slug":"组件只有一个根节点","link":"#组件只有一个根节点","children":[]},{"level":2,"title":"生命周期","slug":"生命周期","link":"#生命周期","children":[]},{"level":2,"title":"组件间的通信","slug":"组件间的通信","link":"#组件间的通信","children":[]},{"level":2,"title":"函数组件和类组件","slug":"函数组件和类组件","link":"#函数组件和类组件","children":[]},{"level":2,"title":"类组件的优点和局限性","slug":"类组件的优点和局限性","link":"#类组件的优点和局限性","children":[]},{"level":2,"title":"setState","slug":"setstate","link":"#setstate","children":[]},{"level":2,"title":"fiber架构","slug":"fiber架构","link":"#fiber架构","children":[]},{"level":2,"title":"key","slug":"key","link":"#key","children":[]},{"level":2,"title":"flux","slug":"flux","link":"#flux","children":[]}],"relativePath":"React/基础知识总结.md"}'),n={name:"React/基础知识总结.md"},t=s(`<h1 id="react-基础知识总结" tabindex="-1">React 基础知识总结 <a class="header-anchor" href="#react-基础知识总结" aria-hidden="true">#</a></h1><h2 id="jsx" tabindex="-1">jsx <a class="header-anchor" href="#jsx" aria-hidden="true">#</a></h2><ul><li>jsx允许在html中写js，是 react.createElement 的语法糖，但是不能被浏览器直接识别，需要通过 babel 转义成 js 执行</li></ul><h2 id="自定义组件首字母大写" tabindex="-1">自定义组件首字母大写 <a class="header-anchor" href="#自定义组件首字母大写" aria-hidden="true">#</a></h2><ul><li>组件首字母小写会被当成字符串进行传递，创建虚拟 dom 的时候就会当成标签，html没有这个标签所以会报错。</li><li>如果首字母大写，就会当成一个变量进行传递，React 会识别成自定义组件</li></ul><h2 id="组件只有一个根节点" tabindex="-1">组件只有一个根节点 <a class="header-anchor" href="#组件只有一个根节点" aria-hidden="true">#</a></h2><ul><li>react 的虚拟 dom 是一个树状结构，树的根节点只能是一个，如果有多个根节点，无法确认是在哪棵树上进行更新</li></ul><h2 id="生命周期" tabindex="-1">生命周期 <a class="header-anchor" href="#生命周期" aria-hidden="true">#</a></h2><ul><li><p>函数组件没有生命周期，只有类组件才有，因为只有类组件才会创建组件实例</p></li><li><p>组件生命周期分为挂载、更新、卸载阶段</p></li></ul><ol><li>挂载阶段</li></ol><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">constructor: 构造函数，最先被执行,我们通常在构造函数里初始化state对象或者给自定义方法绑定this</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">getDerivedStateFromProps: static getDerivedStateFromProps(nextProps, prevState),这是个静态方法,当我们接收到新的属性想去修改我们state，可以使用getDerivedStateFromProps</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">render: render函数是纯函数，只返回需要渲染的东西，不应该包含其它的业务逻辑,可以返回原生的DOM、React组件、Fragment、Portals、字符串和数字、Boolean和null等内容</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">componentDidMount: 组件装载之后调用，此时我们可以获取到DOM节点并操作，比如对canvas，svg的操作，服务器请求，订阅都可以写在这个里面，但是记得在componentWillUnmount中取消订阅</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><ol start="2"><li>更新阶段</li></ol><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">getDerivedStateFromProps: 此方法在更新个挂载阶段都可能会调用</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">shouldComponentUpdate: shouldComponentUpdate(nextProps, nextState),有两个参数nextProps和nextState，表示新的属性和变化之后的state，返回一个布尔值，true表示会触发重新渲染，false表示不会触发重新渲染，默认返回true,我们通常利用此生命周期来优化React程序性能</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">render: 更新阶段也会触发此生命周期</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">getSnapshotBeforeUpdate: getSnapshotBeforeUpdate(prevProps, prevState),这个方法在render之后，componentDidUpdate之前调用，有两个参数prevProps和prevState，表示之前的属性和之前的state，这个函数有一个返回值，会作为第三个参数传给componentDidUpdate，如果你不想要返回值，可以返回null，此生命周期必须与componentDidUpdate搭配使用</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">componentDidUpdate: componentDidUpdate(prevProps, prevState, snapshot),该方法在getSnapshotBeforeUpdate方法之后被调用，有三个参数prevProps，prevState，snapshot，表示之前的props，之前的state，和snapshot。第三个参数是getSnapshotBeforeUpdate返回的,如果触发某些回调函数时需要用到 DOM 元素的状态，则将对比或计算的过程迁移至 getSnapshotBeforeUpdate，然后在 componentDidUpdate 中统一触发回调或更新状态。</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><ol start="3"><li>卸载阶段</li></ol><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">componentWillUnmount: 会在组件卸载及销毁之前直接调用。在此方法中执行必要的清理操作，例如，清除定时器，取消网络请求或清除在 componentDidMount() 中创建的订阅，清理无效的DOM元素等垃圾清理工作。</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h2 id="组件间的通信" tabindex="-1">组件间的通信 <a class="header-anchor" href="#组件间的通信" aria-hidden="true">#</a></h2><ul><li><p>父 -&gt; 子</p><ul><li>子组件接受父组件传过来的 props</li></ul></li><li><p>子 -&gt; 父</p><ul><li>父组件传递一个函数，父组件通过函数回调，拿到子组件传过来的值</li><li>事件冒泡</li></ul></li><li><p>兄弟之间</p><ul><li>先 子a -&gt; 父，然后 父 -&gt; 子b</li></ul></li><li><p>父组件给后代</p><ul><li>Context</li></ul></li><li><p>Ref</p><ul><li>通过 xxxRef.current 拿到相应的数据</li></ul></li><li><p>Redux</p></li></ul><h2 id="函数组件和类组件" tabindex="-1">函数组件和类组件 <a class="header-anchor" href="#函数组件和类组件" aria-hidden="true">#</a></h2><ol><li>类组件需要声明 constructor</li><li>类组件需要手动绑定 this</li><li>类组件有声明周期钩子</li><li>类组件需要继承class</li><li>类组件是面向对象的方法；函数组件是函数式编程</li><li>类组件可以定义维护自己的state，属于有状态组件，函数组件属于无状态组件</li></ol><h2 id="类组件的优点和局限性" tabindex="-1">类组件的优点和局限性 <a class="header-anchor" href="#类组件的优点和局限性" aria-hidden="true">#</a></h2><ul><li><p>优点：</p><ol><li>解决状态逻辑难以拆分的问题</li><li>状态逻辑复用变得简单</li></ol></li><li><p>局限性</p><ol><li>hooks 还不能完整的为函数组件提供类组件的能力</li></ol></li></ul><h2 id="setstate" tabindex="-1">setState <a class="header-anchor" href="#setstate" aria-hidden="true">#</a></h2><ul><li></li></ul><h2 id="fiber架构" tabindex="-1">fiber架构 <a class="header-anchor" href="#fiber架构" aria-hidden="true">#</a></h2><h2 id="key" tabindex="-1">key <a class="header-anchor" href="#key" aria-hidden="true">#</a></h2><ul><li>key是用于识别唯一的虚拟dom元素及其驱动ui的相应数据。</li></ul><h2 id="flux" tabindex="-1">flux <a class="header-anchor" href="#flux" aria-hidden="true">#</a></h2><ul><li>flux 是一种强制单项数据流的架构模式，让应用中的数据只能在store中进行更新</li></ul>`,28),i=[t];function p(r,o,c,d,h,u){return a(),l("div",null,i)}const x=e(n,[["render",p]]);export{A as __pageData,x as default};
