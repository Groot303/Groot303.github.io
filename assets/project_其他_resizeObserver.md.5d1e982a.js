import{_ as s,c as e,o as n,d as a}from"./app.cec77ba5.js";const d=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"window.resize","slug":"window-resize","link":"#window-resize","children":[]},{"level":2,"title":"ResizeObserver","slug":"resizeobserver","link":"#resizeobserver","children":[]}],"relativePath":"project/其他/resizeObserver.md"}'),l={name:"project/其他/resizeObserver.md"},o=a(`<h2 id="window-resize" tabindex="-1">window.resize <a class="header-anchor" href="#window-resize" aria-hidden="true">#</a></h2><ul><li>window.resize事件能帮我们监听窗口大小的变化。但是reize事件会在一秒内触发将近60次，所以很容易在改变窗口大小时导致性能问题，因为它会监听每个元素的大小变化，如果我们只想监听某一个元素的变化的话，就需要用到resizeObserver这个api</li></ul><h2 id="resizeobserver" tabindex="-1">ResizeObserver <a class="header-anchor" href="#resizeobserver" aria-hidden="true">#</a></h2><ul><li>是一个构造函数，可以实时监听到每一项的高度变化</li></ul><h4 id="用法" tabindex="-1">用法 <a class="header-anchor" href="#用法" aria-hidden="true">#</a></h4><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> resizeObserver </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ResizeObserver</span><span style="color:#A6ACCD;">(</span><span style="color:#A6ACCD;font-style:italic;">entries</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">我的尺寸变化了</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">resizeObserver</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">observe</span><span style="color:#A6ACCD;">(document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getElementById</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">box</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">resizeObserver</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">unobserve</span><span style="color:#A6ACCD;">(document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getElementById</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">box</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">resizeObserver</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">disconnect</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"></span></code></pre></div><ul><li>resizeObserver 是返回的一个操作对象，可调用其中的方法来监听、取消监听 DOM 元素等操作。</li><li>observe 方法用于开始观察指定的 Element 或 SVGElement 的尺寸变化。</li><li>entries 参数返回是一个数组，里面包含监听的每个 DOM 元素的相关信息，其中 contentRect 包含的是变化后的内容区域的尺寸信息</li><li>unobserve 结束观察指定的 Element 或 SVGElement</li><li>disconnect 取消和结束目标对象上所有对 Element或 SVGElement 观察</li></ul><p>💥 这个api可以用在虚拟列表的列表项中如果包含图片，我们无法保证获取到列表真实高度是图片是否完成加载，那么就可以使用这个api对列表项进行监听</p>`,8),r=[o];function p(t,c,i,D,A,y){return n(),e("div",null,r)}const C=s(l,[["render",p]]);export{d as __pageData,C as default};
