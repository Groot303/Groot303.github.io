import{_ as n,c as l,a as s,b as p,t as o,d as e,o as t}from"./app.cec77ba5.js";const h=JSON.parse('{"title":"深入理解Javascript的闭包","description":"","frontmatter":{"title":"深入理解Javascript的闭包","editLink":true,"lastUpdated":true},"headers":[{"level":3,"title":"作用域链","slug":"作用域链","link":"#作用域链","children":[]},{"level":3,"title":"闭包","slug":"闭包","link":"#闭包","children":[]},{"level":3,"title":"接下来我们从内存模型来深入理解一下闭包！","slug":"接下来我们从内存模型来深入理解一下闭包","link":"#接下来我们从内存模型来深入理解一下闭包","children":[]}],"relativePath":"html&css&js/JavaScript/闭包.md"}'),c={name:"html&css&js/JavaScript/闭包.md"},r={id:"frontmatter-title",tabindex:"-1"},y=s("a",{class:"header-anchor",href:"#frontmatter-title","aria-hidden":"true"},"#",-1),F=e(`<p>在开始讲闭包之前，我们需要理解作用域和作用域链.</p><h3 id="作用域链" tabindex="-1">作用域链 <a class="header-anchor" href="#作用域链" aria-hidden="true">#</a></h3><h4 id="什么是作用域链" tabindex="-1">什么是作用域链？ <a class="header-anchor" href="#什么是作用域链" aria-hidden="true">#</a></h4><p>我们先看一段代码</p><div class="language-JavaScript"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">bar</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">myName</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">foo</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">myName</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">崔斯特</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">bar</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> myName</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">卡牌大师</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#82AAFF;">foo</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"></span></code></pre></div><p>当我们看到这个题目的时候，我们会想到用执行上下文去分析，当执行到bar函数时，调用栈的状态如图:</p><p><img src="https://img-blog.csdnimg.cn/img_convert/374dbce523bccde562d8ed1a8c330e1a.png" alt=""></p><p><strong>上图可以看到有两个myName变量，那bar执行的时候用的是哪一个呢？</strong></p><p>其实在每个执行上下文的环境变量中，都包含了一个外部引用（称为outer），指向外部的执行上下文。</p><p>当在bar函数的执行上下文中没有找到myName变量的时候，会通过outer去外部的执行上下文中找这个变量。而bar的outer是直接指向全局执行上下文，然后在全局执行上下中，先在词法环境中从栈顶到栈底查找，如果没有再到变量环境中查找。</p><p><strong>有人可能会问：为什么是foo函数调用bar函数，但是outer指向的是全局上下文？</strong></p><ul><li>这个其实和词法作用域（静态作用域）有关，简单来说就是代码结构中函数声明的位置来决定，上述的代码中，foo函数和bar函数的上一级作用域是全局作用域，所以如果foo或bar数调用了一个它们没有定义的变量，它们就会到上一级作用域中查找。说白了：词法作用域是代码阶段就决定好了，和函数是怎么调用没有关系</li></ul><p>到这里已经说明了什么是作用域链了：js沿着词法作用域形成链条一层层往外查找，这个查找的链条就叫做<strong>作用域链</strong></p><h4 id="块级作用域的查找" tabindex="-1">块级作用域的查找 <a class="header-anchor" href="#块级作用域的查找" aria-hidden="true">#</a></h4><p><img src="https://img-blog.csdnimg.cn/img_convert/2ac38103ec80728eff9cf64fa858e97f.png" alt=""></p><p>我们来说说上述的查找过程，当执行到bar函数的if语句时，因为bar函数的执行上下文中没有定义test变量，根据词法作用域规则，就会到bar函数的外部作用域中查找，也就是全局作用域。在单个执行上下文中的查找规则：先在词法环境中从栈顶到栈底查找，如果没有再到变量环境中查找。</p><h3 id="闭包" tabindex="-1">闭包 <a class="header-anchor" href="#闭包" aria-hidden="true">#</a></h3><p><strong>了解完作用域链之后，我们从作用域链的角度来讲讲什么是闭包！</strong></p><p>先看一段代码</p><div class="language-JavaScript"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">foo</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">myName</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">崔斯特</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">test1</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">test2</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">innerBar</span><span style="color:#89DDFF;">={</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">setName</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">newName</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">myName</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newName</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">getName</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">test1</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">myName</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">innerBar</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> bar </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">foo</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">bar</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setName</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">卡牌大师</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">bar</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getName</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(bar</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getName</span><span style="color:#A6ACCD;">())</span></span>
<span class="line"></span></code></pre></div><p>根据词法作用域原则，innerBar中的两个方法可以访问foo函数的两个变量，当inner函数被返回给全局bar变量时，虽然foo函数已经执行结束，但是getName和setName函数依然可以使⽤foo函数中的变量myName和test1。</p><p>看到这里我们可以给闭包下一个定义了！在JavaScript中，根据词法作⽤域的规则，闭包指的是那些引用了另一个函数作用域中变量的函数，当通过调⽤⼀个外部函数返回⼀个内部函数后，即使该外部函数已经执⾏结束了，但是内部函数引⽤外部函数的变量依然保存在内存中。⽐如外部函数是foo，innerBar就是一个闭包函数。</p><h4 id="闭包的回收" tabindex="-1">闭包的回收 <a class="header-anchor" href="#闭包的回收" aria-hidden="true">#</a></h4><p>当我们闭包使用不正确时，很容易造成内存泄漏</p><ul><li>如果闭包函数引用的是一个全局变量，那么这个闭包就会一直存在直到页面关闭，如果这个闭包不再使用的话，就会造成内存泄漏！</li><li>如果闭包函数引用的是一个局部变量，等函数销毁后，在下次js引擎执行垃圾回收时，判断闭包这块内容如果已经不再被使用了，那垃圾回收器就会回收这块内容。</li></ul><h3 id="接下来我们从内存模型来深入理解一下闭包" tabindex="-1"><strong>接下来我们从内存模型来深入理解一下闭包！</strong> <a class="header-anchor" href="#接下来我们从内存模型来深入理解一下闭包" aria-hidden="true">#</a></h3><p>我们先来了解一下js在运行的过程中，数据是怎么存储的</p><p>在js的执行中有三种内存空间：代码空间、栈空间、堆空间</p><p>代码空间是存储可执行代码的，我们主要来看看栈空间和堆空间</p><p><strong>栈空间和堆空间</strong></p><p>前面讲的调用栈就是我们说的栈空间，存储执行上下文用的，我们来看一段代码：</p><div class="language-JavaScript"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">foo</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">a</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">崔斯特</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">b</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">a</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">c</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">myName</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">崔斯特</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">d</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">c</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#82AAFF;">foo</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"></span></code></pre></div><p>分析一下上面这段代码变量的存储，a和b是赋值着原始数据类型，所以他们会依次压入栈中的执行上下文的变量环境，但是c赋值的是引用类型，这时候的情况就不一样了。js引擎会把c、d分配到堆空间中，分配后会有一个堆地址，再把堆地址赋值给c。</p><p><strong>可能现在你有疑问：把所有的数据存储在栈空间不好么？为什么要维护栈空间和堆空间呢？</strong></p><p>a. 因为js引擎要用栈来维护函数的执行上下文，在一个函数执行结束后，当前函数的执行上下文栈区空间会被全部回收，然后js引擎要离开当前的执行上下文，只需要将指针下移到下一个执行上下文就可以了。如果栈空间太大的话，会影响执行上下文切换的效率，进而影响到整个程序的执行效率！</p><p>b. 通常情况下栈空间不会设置很大，主要是存放一些原始数据类型。堆空间比较大，适合存放一些占用空间较大的引用类型的数据。</p><p><strong>内存模型视角的闭包</strong></p><p>还是看上面的例子，foo函数的执⾏上下⽂销毁时，由于foo函数产⽣了闭包，所以变量myName和test1没有被销毁，⽽是保存在内存中。这个过程在内存中是怎么样的呢？</p><ul><li>js执行foo函数时，首先会编译，编译过程中遇到内部函数setName，js引擎还要对内部函数做一次词法扫描，发现内部函数引用了foo函数中的myName变量，js引擎会判断这是一个闭包，于是会在堆空间中创建一个&quot;closure(foo)&quot;对象（内部对象，js无法访问）来保存myName。</li><li>继续扫面，发现setName函数内部还引用了test1，引擎又将test1添加到closure(foo)对象中，这时候对象就包含了两个变量了。</li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/e02e2d4af1bcde40a4df0e5c6e488726.png" alt=""></p><p>当执行到foo函数时，闭包就产生了；当foo函数执行结束之后，返回的getName和setName⽅法都用“clourse(foo)”对象，所以即使foo函数退出了，foo函数执行上下文被销毁了，“clourse(foo)”依然被其内部的getName和setNam法引用。所以在下次调用bar.setName或者bar.getName时，创建的执行上下文中就包含了“clourse(foo)”。</p><h4 id="闭包的运用" tabindex="-1">闭包的运用 <a class="header-anchor" href="#闭包的运用" aria-hidden="true">#</a></h4><ul><li>实现模块化和私有变量：将不想被外部代码修改的相关函数和一些变量封装在一个函数并暴露出去，就实现了函数模块化和变量私有化。</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> foo </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> (</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">num</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">//私有化变量</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">increment</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">num</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">++</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">decrement</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">num</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">--</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 模块化</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">increment</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">decrement</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)()</span></span>
<span class="line"><span style="color:#82AAFF;">foo</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"></span></code></pre></div><ul><li>函数柯里化</li></ul>`,45);function i(a,D,A,C,d,m){return t(),l("div",null,[s("h1",r,[p(o(a.$frontmatter.title)+" ",1),y]),F])}const f=n(c,[["render",i]]);export{h as __pageData,f as default};
