import{_ as s,c as n,o as a,d as l}from"./app.f1dc7af0.js";const C=JSON.parse('{"title":"loader & plugin","description":"","frontmatter":{},"headers":[{"level":2,"title":"使用背景","slug":"使用背景","link":"#使用背景","children":[]},{"level":2,"title":"loader的使用","slug":"loader的使用","link":"#loader的使用","children":[]},{"level":2,"title":"编写 loader","slug":"编写-loader","link":"#编写-loader","children":[]},{"level":2,"title":"plugin的使用","slug":"plugin的使用","link":"#plugin的使用","children":[]},{"level":2,"title":"编写 plugin","slug":"编写-plugin","link":"#编写-plugin","children":[]},{"level":2,"title":"loader 和 plugin 区别","slug":"loader-和-plugin-区别","link":"#loader-和-plugin-区别","children":[]}],"relativePath":"webpack/loader&plugin.md"}'),p={name:"webpack/loader&plugin.md"},o=l(`<h1 id="loader-plugin" tabindex="-1">loader &amp; plugin <a class="header-anchor" href="#loader-plugin" aria-hidden="true">#</a></h1><h2 id="使用背景" tabindex="-1">使用背景 <a class="header-anchor" href="#使用背景" aria-hidden="true">#</a></h2><ul><li>webpack 本身能做的事情只是对 js 代码的编译和打包（只认识低级 js）， 所以要让它能处理 css、vue、ts 等类型的文件时，就需要使用 loader ，他能帮助 webpack 把非 js 文件转义成 js 代码；而 plugin 是让 webpack 具有更强大的功能，比如：抽离css 文件，把打包后的 js 文件注入到一个 html 中等等</li></ul><h2 id="loader的使用" tabindex="-1">loader的使用 <a class="header-anchor" href="#loader的使用" aria-hidden="true">#</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// webpack.config.js</span></span>
<span class="line"><span style="color:#FFCB6B;">module</span><span style="color:#89DDFF;">:{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">rules</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;">[</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            test</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">\\.</span><span style="color:#C3E88D;">css</span><span style="color:#89DDFF;">/</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">            use</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> [</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#A6ACCD;">minicss</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">loader</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">css-loader</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                    loader</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./mycss-loader</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#F07178;">                    options</span><span style="color:#89DDFF;">:{</span><span style="color:#F07178;"> xxx</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">xxx</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">            ]</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    ]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><ul><li>通过上面的操作, css文件就会先经过我们自己编写的 loader 进行处理再使用其他loader</li></ul><h2 id="编写-loader" tabindex="-1">编写 loader <a class="header-anchor" href="#编写-loader" aria-hidden="true">#</a></h2><ul><li><p>loader 本质是一个方法，接受文件的内容，再把处理完的结果返回出去</p></li><li><p>返回的结果一般有两种形式：</p><ul><li>返回打包完可以直接使用的 js</li><li>返回的结果给下一 loader 加工</li></ul></li><li><p>编写 loader 主要是 node 的一些读写文件的操作和字符串的拼接</p></li><li><p>要读取 webpack.config,json 中传入的 options 可以利用 <code>babel-util</code> 库的 <code>getOptions(this)</code> 方法，该方法返回传入的 options</p></li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// mycss-loader.js</span></span>
<span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">cssContent</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">cssContent</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">replace</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">10px</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">1px</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="plugin的使用" tabindex="-1">plugin的使用 <a class="header-anchor" href="#plugin的使用" aria-hidden="true">#</a></h2><ul><li>plugins 在 webpack.config.json 中是一个数组，通过 new Plugin() 使用</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">plugins</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">HtmlWebpackPlugin</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">/*这里传入相关参数*/</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">]</span></span>
<span class="line"></span></code></pre></div><h2 id="编写-plugin" tabindex="-1">编写 plugin <a class="header-anchor" href="#编写-plugin" aria-hidden="true">#</a></h2><ul><li>插件就是一个类，在 webpack 工作的过程中调用其 apply 方法实现在打包过程中对代码的操作</li><li>在项目构建或者打包完成之后我们想要做什么就可以通过编写插件来完成，比如：可以在 done 周期进行 dist 文件压缩 自动上传等功能的开发</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">myPlugin</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">constructor</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">apply</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">compiler</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">compiler</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">hooks</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">emit</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">tap</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">myPlugin</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">compilation</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#676E95;font-style:italic;">/* 可以从 compilation.assets 这个对象中获取 webpack 在 emit 生命周期编译的产物*/</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">// 创建自定义文件内容</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">myfileContent</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello plugin</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">// 添加自定义文件到 index.txt 中</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">compilation</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">assets</span><span style="color:#F07178;">[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">index,txt</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#82AAFF;">source</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">myfileContent</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">},</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 定义文件内容</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#82AAFF;">size</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">myfileContent</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 定义文件大小</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> myPlugin</span></span>
<span class="line"></span></code></pre></div><h2 id="loader-和-plugin-区别" tabindex="-1">loader 和 plugin 区别 <a class="header-anchor" href="#loader-和-plugin-区别" aria-hidden="true">#</a></h2><ul><li>loader 会对非 js 文件进行转义，让 webpack 具备处理其他文件类型的能力</li><li>plugin 不会对文件操作，它可以监听到 webpack 运行过程中生命周期的事件，在相应时期改变打包产物</li></ul>`,17),e=[o];function t(c,r,i,y,F,D){return a(),n("div",null,e)}const u=s(p,[["render",t]]);export{C as __pageData,u as default};
