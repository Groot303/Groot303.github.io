import{_ as a,c as n,a as s,b as e,t as o,d as i,o as p}from"./app.cec77ba5.js";const u=JSON.parse('{"title":"css基础知识","description":"","frontmatter":{"title":"css基础知识","categories":["css"],"tags":["css"]},"headers":[{"level":2,"title":"css样式的优先级","slug":"css样式的优先级","link":"#css样式的优先级","children":[]},{"level":2,"title":"盒子模型","slug":"盒子模型","link":"#盒子模型","children":[]},{"level":2,"title":"让元素水平垂直居中的方法","slug":"让元素水平垂直居中的方法","link":"#让元素水平垂直居中的方法","children":[]},{"level":2,"title":"flex布局","slug":"flex布局","link":"#flex布局","children":[]},{"level":2,"title":"定位","slug":"定位","link":"#定位","children":[]},{"level":2,"title":"z-index什么时候生效","slug":"z-index什么时候生效","link":"#z-index什么时候生效","children":[]},{"level":2,"title":"隐藏元素的方法","slug":"隐藏元素的方法","link":"#隐藏元素的方法","children":[]},{"level":2,"title":"bfc（block formatting context）","slug":"bfc-block-formatting-context","link":"#bfc-block-formatting-context","children":[]},{"level":2,"title":"清除浮动的方法","slug":"清除浮动的方法","link":"#清除浮动的方法","children":[]},{"level":2,"title":"px、em、rem、vw的区别","slug":"px、em、rem、vw的区别","link":"#px、em、rem、vw的区别","children":[]},{"level":2,"title":"一些实现相应效果的属性","slug":"一些实现相应效果的属性","link":"#一些实现相应效果的属性","children":[]}],"relativePath":"html&css&js/css/css基础知识.md"}'),t={name:"html&css&js/css/css基础知识.md"},c={id:"frontmatter-title",tabindex:"-1"},r=s("a",{class:"header-anchor",href:"#frontmatter-title","aria-hidden":"true"},"#",-1),d=i(`<h2 id="css样式的优先级" tabindex="-1">css样式的优先级 <a class="header-anchor" href="#css样式的优先级" aria-hidden="true">#</a></h2><p>!important &gt; 内联样式 &gt; ID选择器 &gt; 伪类 = 属性选择器 = 类选择器 &gt; 标签选择器 &gt; 通配符（*）。如非特殊情况，慎用!important。因为使用!important会扰乱原本层叠和权重产生正常的作用顺序，使后期维护带来麻烦。</p><h2 id="盒子模型" tabindex="-1">盒子模型 <a class="header-anchor" href="#盒子模型" aria-hidden="true">#</a></h2><p>盒子模型分为标准盒模型IE盒子模型（又称怪异盒模型）。</p><h5 id="标准盒模型" tabindex="-1">标准盒模型 <a class="header-anchor" href="#标准盒模型" aria-hidden="true">#</a></h5><ul><li>盒子总宽度= width + padding + border + margin。盒子总高度= height + padding + border +margin。</li><li>我们设置的width/height只是内容content的宽/高度，<code>不包含padding和border值</code></li></ul><h5 id="ie盒子模型" tabindex="-1">IE盒子模型： <a class="header-anchor" href="#ie盒子模型" aria-hidden="true">#</a></h5><ul><li>盒子总宽度= width+ margin = (内容区宽度+ padding + border) + margin。也就是我们设置的width/height<code>包含了padding和border值</code>。</li><li>总结：标准盒子模型和IE盒子模型的差别就在于宽度和高度包含的范围不同。</li></ul><h5 id="css3的box-sizing新特性" tabindex="-1">css3的box-sizing新特性 <a class="header-anchor" href="#css3的box-sizing新特性" aria-hidden="true">#</a></h5><ul><li>content-box：指定为标准盒模型</li><li>border-box：指定为IE盒模型</li></ul><h2 id="让元素水平垂直居中的方法" tabindex="-1">让元素水平垂直居中的方法 <a class="header-anchor" href="#让元素水平垂直居中的方法" aria-hidden="true">#</a></h2><ol><li>定位 + margin：auto + top、bottom、left、right：0 （元素未知宽高）</li><li>定位 + margin：-自身宽高的一半 + top：50% + left：50%</li><li>定位 + transform：translate（-50%，-50%） + top：50% + left：50%</li><li>flex布局：利用align-items: center和justify-content: center（元素未知宽高）</li><li>table布局：</li></ol><ul><li>设置父元素为display:table-cell，vertical-align：middle，text-align：center。</li><li>子元素设置 display: inline-block。利用vertical-align和text-align可以让所有的行内块级元素水平垂直居中</li><li>display: table-cell; 相当于td标签， <ul><li>设置vertical-align，td里面的所有块级非块级元素（除了脱标元素）都会垂直居中，</li><li>设置text-align, td里面的所有非块级元素（脱标元素除外）都会水平居中，所以把子元素设置成inline元素就能实现水平居中</li></ul></li></ul><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">parent </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">display</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> table-cell</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">text-align</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> center</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">vertical-align</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> middle</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">children </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">display</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> inline-block</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><ol start="6"><li>grid网格布局：（元素未知宽高）</li></ol><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">parent </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">display</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> grid</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">children </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">align-self</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> center</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">justify-self</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> center</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><ol start="7"><li>父元素设置为弹性盒子，子元素 margin: auto。可让子元素水平垂直居中。</li></ol><ul><li>margin: auto。只对块级元素有作用，且要设置with。auto是相对于弹性盒子来计算的，普通盒子只有水平方向是弹性的，垂直方向弹性，所以把父元素设置成弹性盒子就能生效。</li></ul><h2 id="flex布局" tabindex="-1">flex布局 <a class="header-anchor" href="#flex布局" aria-hidden="true">#</a></h2><p>设置flex布局后，子元素的float、clear、vertical-align失效</p><ul><li><p>容器的属性</p><ul><li>flex-direction（决定主轴的方向）</li><li>flex-wrap（换行，但是默认不换行）</li><li>flex-flow（上面两个的简写）</li><li>justify-content（项目在主轴的对齐方式）</li><li>align-items（在交叉轴上的对其方式）</li><li>align-content（多根轴线的对齐方式，一根轴线不起作用）</li></ul></li><li><p>项目的属性</p><ul><li><code>order</code>（项目的排列顺序，越小越靠前）</li><li><code>flex-grow</code>（放大比例，默认0，存在剩余空间也不放大）</li><li><code>flex-shrink</code>（缩小比例，默认1，空间不足，项目缩小）</li><li><code>flex-basis</code>（定义项目占据的空间，默认auto就是盒子本身的大小，当同时设置了宽高，flex-basis优先级更高）</li><li><code>flex</code>（上面三个的简写）该属性有两个快捷值：<code>auto</code> (<code>1 1 auto</code>) 和 none (<code>0 0 auto</code>)。</li><li><code>align-self</code>（允许这个项目与其他项目不一样的对齐方式，可以覆盖align-items）</li></ul></li><li><p>flex：1；即为flex-grow：1，</p><ul><li>经常用作自适应布局，将父容器的display：flex，</li><li>侧边栏大小固定后，将内容区flex：1，内容区则会自动放大占满剩余空间。</li></ul></li></ul><h2 id="定位" tabindex="-1">定位 <a class="header-anchor" href="#定位" aria-hidden="true">#</a></h2><ul><li>静态定位 static (top, right, z-index 等属性都无效)</li><li>相对定位 relative（不脱离文档流，相对自身位置）</li><li>粘性定位 sticky（不脱离文档流，相对于浏览器视口本身，可以认为是相对定位和绝对定位的结合，常用在实现导航栏，滑动到距浏览器上端就变成固定定位）</li><li>绝对定位 absolute（脱离文档流，绝对定位元素相对于最近的非 static 祖先元素定位）</li><li>固定定位 fixed（脱离文档流，相对于浏览器视口本身，其他的和绝对定位一样）</li></ul><h2 id="z-index什么时候生效" tabindex="-1">z-index什么时候生效 <a class="header-anchor" href="#z-index什么时候生效" aria-hidden="true">#</a></h2><ul><li>opacity 不为0或1</li><li>transform不为none时，z-index会生效</li><li>当transform不为none时，z-index会生效</li></ul><h2 id="隐藏元素的方法" tabindex="-1">隐藏元素的方法 <a class="header-anchor" href="#隐藏元素的方法" aria-hidden="true">#</a></h2><ol><li>display:none。元素在页面上将彻底消失，元素本来占有的空间就会被其他元素占有，也就是说它会导致浏览器的重排和重绘。绑定的点击事件不会被触发</li><li>visibility：hidden。元素在页面消失后，其占据的空间依旧会保留着，所以它<code>只会导致浏览器重绘而不会重排</code>。绑定的点击事件不会被触发</li><li>opactity：0。设置透明度为0后，元素只是隐身了，它依旧存在页面中。可以触发点击事件</li></ol><h2 id="bfc-block-formatting-context" tabindex="-1">bfc（block formatting context） <a class="header-anchor" href="#bfc-block-formatting-context" aria-hidden="true">#</a></h2><p>块级格式化上下文，是页面中的一块渲染区域，并且有一套自己的渲染规则，目的是形成一个相对于外界完全独立的空间，让内部的子元素不会影响到外部的元素。</p><h5 id="触发bfc的条件" tabindex="-1">触发bfc的条件 <a class="header-anchor" href="#触发bfc的条件" aria-hidden="true">#</a></h5><ol><li>浮动元素</li><li>overflow值不为 visible，为 auto、scroll、hidden</li><li>display的值为inline-block、inltable-cell、table-caption、table、inline-table、flex、inline-flex、grid、inline-grid</li><li>position的值为absolute或fixed</li></ol><h5 id="bfc的渲染规则" tabindex="-1">bfc的渲染规则 <a class="header-anchor" href="#bfc的渲染规则" aria-hidden="true">#</a></h5><ol><li>内部的盒子会在垂直方向上一个接一个的放置</li><li>对于同一个BFC的俩个相邻的盒子的margin会发生重叠，与方向无关。所以，让其中一个盒子形成一个独立的bfc就能解决外边距塌陷问题</li><li>BFC的区域不会与float的元素区域重叠，所以当左边的元素浮动时，让右边的元素形成bfc就不会形成左边元素在右边元素里面的情况了。</li><li>计算BFC的高度时，浮动子元素也参与计算，所以让父元素形成bfc就能清楚浮动。</li><li>BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素，反之亦然</li></ol><h2 id="清除浮动的方法" tabindex="-1">清除浮动的方法 <a class="header-anchor" href="#清除浮动的方法" aria-hidden="true">#</a></h2><ol><li>在最后一个浮动标签后，新加一个标签，给其设置clear：both；使用这种办法，如果我们清除了浮动，父元素自动检测子盒子最高的高度，然后与其同高。</li></ol><ul><li>优点：通俗易懂，方便。</li><li>缺点：添加无意义标签，语义化差，所以不建议使用。</li></ul><ol start="2"><li>给父元素添加overflow:hidden（形成bfc）</li></ol><ul><li>优点：代码简洁。</li><li>缺点：如果内容增多的时候容易造成不会自动换行导致内容被隐藏掉，无法显示要溢出的元素，因为设置了overflow：hidden，看具体情况来决定是否使用。</li></ul><ol start="3"><li>使用after伪元素清除浮动。</li></ol><ul><li>优点：符合闭合浮动思想，结构语义化正确.</li><li>缺点：ie6-7不支持伪元素:after，使用zoom:1触发hasLayout。整体相对来说，推荐使用after伪元素来清除浮动。</li></ul><h2 id="px、em、rem、vw的区别" tabindex="-1">px、em、rem、vw的区别 <a class="header-anchor" href="#px、em、rem、vw的区别" aria-hidden="true">#</a></h2><h5 id="px" tabindex="-1">px： <a class="header-anchor" href="#px" aria-hidden="true">#</a></h5><ul><li>最常用的，它是相对于显示器屏幕分辨率而言的。</li><li>优缺点：比较稳定和精确，但在浏览器中放大或缩放浏览页面时会出现页面混乱的情况。</li></ul><h5 id="em" tabindex="-1">em： <a class="header-anchor" href="#em" aria-hidden="true">#</a></h5><ul><li>相对单位，基准点为父节点字体的大小，如果父节点没设定就按浏览器默认字体16px（1em = 16px），整个页面内1em不是一个固定的值。</li><li>优缺点：em的值并不是固定的，它会继承父级元素的字体大小。</li></ul><h5 id="rem" tabindex="-1">rem： <a class="header-anchor" href="#rem" aria-hidden="true">#</a></h5><ul><li>相对单位，基于root元素，即根据html元素的大小来计算，不受容器本身字体大小的影响，全部根据html的字体大小重新计算。设定根元素<code>&lt;html&gt;</code>的font-size属性，默认为16px，那么1rem = 16px。</li><li>优缺点：这个单位可谓集相对大小和绝对大小的优点于一身，通过它既可以做到只修改根元素就成比例地调整所有字体大小，又可以避免字体大小逐层复合的连锁反应。</li></ul><h5 id="vw。vh" tabindex="-1">vw。vh <a class="header-anchor" href="#vw。vh" aria-hidden="true">#</a></h5><ul><li>Vh：1vw等于屏幕可视区高度的百分之一。Vw：1vw等于屏幕可视区宽度的百分之一。</li></ul><h2 id="一些实现相应效果的属性" tabindex="-1">一些实现相应效果的属性 <a class="header-anchor" href="#一些实现相应效果的属性" aria-hidden="true">#</a></h2><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">1. 让Chrome支持小于12px的文字：利用缩放</span></span>
<span class="line"><span style="color:#FFCB6B;">span</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#B2CCD6;">font-size</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">12px</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#B2CCD6;">display</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> inline-block</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">-webkit-transform</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;">scale</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0.8</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;</span><span style="color:#FFCB6B;">span</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">10px的字体效果&lt;/</span><span style="color:#FFCB6B;">span</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">2. 单行溢出省略号，利用 </span><span style="color:#FFCB6B;">text-overflow</span><span style="color:#A6ACCD;">: ellipsis;</span></span>
<span class="line"><span style="color:#FFCB6B;">p</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#B2CCD6;">width</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">100px</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#B2CCD6;">overflow</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> hidden</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#B2CCD6;">white-space</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> nowrap</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#B2CCD6;">text-overflow</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> ellipsis</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;</span><span style="color:#FFCB6B;">p</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">这里再长一点就要变成省略号了&lt;/</span><span style="color:#FFCB6B;">p</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">3. 多行溢出省略号</span></span>
<span class="line"><span style="color:#FFCB6B;">p</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#B2CCD6;">display</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> -webkit-box</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">-webkit-box-orient</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> vertical</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">-webkit-line-clamp</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#B2CCD6;">overflow</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> hidden</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#B2CCD6;">width</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">200px</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;</span><span style="color:#FFCB6B;">p</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">这里再长一点就要变成多行文字</span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;">省略号了&lt;/</span><span style="color:#FFCB6B;">p</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div>`,51);function D(l,h,y,F,C,f){return p(),n("div",null,[s("h1",c,[e(o(l.$frontmatter.title)+" ",1),r]),d])}const x=a(t,[["render",D]]);export{u as __pageData,x as default};
