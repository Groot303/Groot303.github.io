import{_ as a,c as l,a as s,b as p,t as e,d as o,o as t}from"./app.80c79e1c.js";const f=JSON.parse('{"title":"vue源码解读之new Vue","description":"","frontmatter":{"title":"vue源码解读之new Vue","categories":["Vue2"],"tags":["vue2原理"]},"headers":[{"level":2,"title":"vue的构造函数","slug":"vue的构造函数","link":"#vue的构造函数","children":[]},{"level":2,"title":"_init()函数中","slug":"init-函数中","link":"#init-函数中","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"relativePath":"Vue原理/vue源码.md"}'),c={name:"Vue原理/vue源码.md"},r={id:"frontmatter-title",tabindex:"-1"},i=s("a",{class:"header-anchor",href:"#frontmatter-title","aria-hidden":"true"},"#",-1),y=o(`<h2 id="vue的构造函数" tabindex="-1">vue的构造函数 <a class="header-anchor" href="#vue的构造函数" aria-hidden="true">#</a></h2><ul><li>源码位置：src\\core\\instance\\index.js</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Vue</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">options</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">process</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">env</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">NODE_ENV</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!==</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">production</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">!</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">instanceof</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Vue</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  ) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">warn</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Vue is a constructor and should be called with the \`new\` keyword</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">_init</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">options</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">initMixin</span><span style="color:#A6ACCD;">(Vue)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">     </span><span style="color:#676E95;font-style:italic;">// 定义 _init</span></span>
<span class="line"><span style="color:#82AAFF;">stateMixin</span><span style="color:#A6ACCD;">(Vue)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">// 定义 $set $get $delete $watch 等</span></span>
<span class="line"><span style="color:#82AAFF;">eventsMixin</span><span style="color:#A6ACCD;">(Vue)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">   </span><span style="color:#676E95;font-style:italic;">// 定义事件  $on  $once $off $emit</span></span>
<span class="line"><span style="color:#82AAFF;">lifecycleMixin</span><span style="color:#A6ACCD;">(Vue)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">// 定义 _update  $forceUpdate  $destroy</span></span>
<span class="line"><span style="color:#82AAFF;">renderMixin</span><span style="color:#A6ACCD;">(Vue)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">   </span><span style="color:#676E95;font-style:italic;">// 定义 _render 返回虚拟dom</span></span>
<span class="line"></span></code></pre></div><h2 id="init-函数中" tabindex="-1">_init()函数中 <a class="header-anchor" href="#init-函数中" aria-hidden="true">#</a></h2><ul><li>源码位置：src\\core\\instance\\init.js</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 初始化组件生命周期标志位</span></span>
<span class="line"><span style="color:#82AAFF;">initLifecycle</span><span style="color:#A6ACCD;">(vm)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 初始化组件事件侦听</span></span>
<span class="line"><span style="color:#82AAFF;">initEvents</span><span style="color:#A6ACCD;">(vm)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 初始化渲染方法</span></span>
<span class="line"><span style="color:#82AAFF;">initRender</span><span style="color:#A6ACCD;">(vm)</span></span>
<span class="line"><span style="color:#82AAFF;">callHook</span><span style="color:#A6ACCD;">(vm</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">beforeCreate</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 初始化依赖注入内容，在初始化data、props之前</span></span>
<span class="line"><span style="color:#82AAFF;">initInjections</span><span style="color:#A6ACCD;">(vm) </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 初始化props/data/method/watch/methods</span></span>
<span class="line"><span style="color:#82AAFF;">initState</span><span style="color:#A6ACCD;">(vm)</span></span>
<span class="line"><span style="color:#82AAFF;">initProvide</span><span style="color:#A6ACCD;">(vm) </span></span>
<span class="line"><span style="color:#82AAFF;">callHook</span><span style="color:#A6ACCD;">(vm</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">created</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//挂载元素</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (vm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">$options</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">el) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">vm</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">$mount</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">vm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">$options</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">el</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><ul><li>在调用beforeCreate之前，数据初始化并未完成，无法访问到data、props这些属性</li><li>到了created的时候，数据已经初始化完成，能够访问data、props这些属性，但这时候并未完成dom的挂载，因此无法访问到dom元素</li></ul><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-hidden="true">#</a></h2><ul><li><p>new Vue 过程会调用_init()函数</p><ul><li>定义 $set、$get 、$delete、$watch 等方法</li><li>定义 $on、$off、$emit、$off等事件</li><li>定义 _update、$forceUpdate、$destroy生命周期</li><li>初始化props/data/method/watch/methods，进行数据响应式处理</li></ul></li><li><p>调用$mount进行页面挂载</p></li><li><p>挂载的时候主要是通过mountComponent方法</p></li><li><p>定义updateComponent更新函数</p></li><li><p>执行render生成虚拟DOM</p></li><li><p>_update将虚拟DOM生成真实DOM结构，并且渲染到页面中</p></li></ul>`,9);function F(n,D,A,C,d,u){return t(),l("div",null,[s("h1",r,[p(e(n.$frontmatter.title)+" ",1),i]),y])}const m=a(c,[["render",F]]);export{f as __pageData,m as default};
