import{_ as e,c as a,o as s,d as n}from"./app.80c79e1c.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"buffer和流","slug":"buffer和流","link":"#buffer和流","children":[]}],"relativePath":"Node.js/buffer和流.md"}'),t={name:"Node.js/buffer和流.md"},o=n(`<h2 id="buffer和流" tabindex="-1">buffer和流 <a class="header-anchor" href="#buffer和流" aria-hidden="true">#</a></h2><p>💥 buffer 可以理解为一个固定长度的字符串数组，存在于v8内存外，储存文件的二进制内容</p><h5 id="buffer相关操作" tabindex="-1">buffer相关操作 <a class="header-anchor" href="#buffer相关操作" aria-hidden="true">#</a></h5><ol><li>创建</li></ol><div class="language-node"><button title="Copy Code" class="copy"></button><span class="lang">node</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">const bf1 = Buffer.alloc(10, &#39;1&#39;)</span></span>
<span class="line"><span style="color:#A6ACCD;">const bf2 = Buffer.from(&quot;hello&quot;) </span></span>
<span class="line"><span style="color:#A6ACCD;">console.log(bf1.toString());//1111111111</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>💥 流可以理解成一个管道</p><p>当一个文件很大的时候，如果用buffer一次性读取会造成系统卡顿，所以可以使用流进行读取</p>`,7),r=[o];function l(f,c,p,i,d,u){return s(),a("div",null,r)}const h=e(t,[["render",l]]);export{b as __pageData,h as default};
