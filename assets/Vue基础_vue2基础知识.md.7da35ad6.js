import{_ as a,c as s,a as l,b as i,t,d as n,o}from"./app.eff202be.js";const f=JSON.parse('{"title":"vue基础知识","description":"","frontmatter":{"title":"vue基础知识","categories":["Vue2"],"tags":["vue2基础"]},"headers":[{"level":2,"title":"computer和methods区别","slug":"computer和methods区别","link":"#computer和methods区别","children":[]},{"level":2,"title":"computed和watch的区别","slug":"computed和watch的区别","link":"#computed和watch的区别","children":[]},{"level":2,"title":"v-show和v-if","slug":"v-show和v-if","link":"#v-show和v-if","children":[]},{"level":2,"title":"spa单页面应用","slug":"spa单页面应用","link":"#spa单页面应用","children":[]},{"level":2,"title":"vue和传统项目开发的区别","slug":"vue和传统项目开发的区别","link":"#vue和传统项目开发的区别","children":[]},{"level":2,"title":"父子组件的生命周期","slug":"父子组件的生命周期","link":"#父子组件的生命周期","children":[]},{"level":2,"title":"组件间的通信方式","slug":"组件间的通信方式","link":"#组件间的通信方式","children":[]},{"level":2,"title":"什么是组件化开发？为什么使用组件化开发？","slug":"什么是组件化开发-为什么使用组件化开发","link":"#什么是组件化开发-为什么使用组件化开发","children":[]},{"level":2,"title":"Vue slot的传值","slug":"vue-slot的传值","link":"#vue-slot的传值","children":[]},{"level":2,"title":"vue怎么做权限管理，控制到按钮级别的权限呢？","slug":"vue怎么做权限管理-控制到按钮级别的权限呢","link":"#vue怎么做权限管理-控制到按钮级别的权限呢","children":[]},{"level":2,"title":"如何给spa做seo","slug":"如何给spa做seo","link":"#如何给spa做seo","children":[]},{"level":2,"title":"spa解决首屏加载慢","slug":"spa解决首屏加载慢","link":"#spa解决首屏加载慢","children":[]},{"level":2,"title":"组件data定义函数和对象的区别","slug":"组件data定义函数和对象的区别","link":"#组件data定义函数和对象的区别","children":[]},{"level":2,"title":"vue中给对象添加新属性界面没反应","slug":"vue中给对象添加新属性界面没反应","link":"#vue中给对象添加新属性界面没反应","children":[]},{"level":2,"title":"vue中组件和插件的区别","slug":"vue中组件和插件的区别","link":"#vue中组件和插件的区别","children":[]},{"level":2,"title":"nextTick","slug":"nexttick","link":"#nexttick","children":[]},{"level":2,"title":"mixin","slug":"mixin","link":"#mixin","children":[]},{"level":2,"title":"vue.observable","slug":"vue-observable","link":"#vue-observable","children":[]},{"level":2,"title":"缓存后有两种方案更新：","slug":"缓存后有两种方案更新","link":"#缓存后有两种方案更新","children":[]},{"level":2,"title":"虚拟dom","slug":"虚拟dom","link":"#虚拟dom","children":[]},{"level":2,"title":"虚拟dom解析过程：","slug":"虚拟dom解析过程","link":"#虚拟dom解析过程","children":[]},{"level":2,"title":"diff算法","slug":"diff算法","link":"#diff算法","children":[]},{"level":2,"title":"v-for循环中的key作用","slug":"v-for循环中的key作用","link":"#v-for循环中的key作用","children":[]}],"relativePath":"Vue基础/vue2基础知识.md"}'),r={name:"Vue基础/vue2基础知识.md"},p={id:"frontmatter-title",tabindex:"-1"},d=l("a",{class:"header-anchor",href:"#frontmatter-title","aria-hidden":"true"},"#",-1),c=n(`<h2 id="computer和methods区别" tabindex="-1">computer和methods区别 <a class="header-anchor" href="#computer和methods区别" aria-hidden="true">#</a></h2><ul><li><p>computed 计算属性 :</p><ul><li>计算属性是基于它们的响应式依赖进行缓存的，只在相关响应式依赖发生变化时才会重新求值，多次访问该属性时，会返回之前的计算结果，不必再次执行函数。</li><li>成员既可以定义成函数也可以定义成可读写的属性</li><li>定义的成员像属性一样调用</li></ul></li><li><p>methods 方法：</p><ul><li>成员只能是函数的形式</li><li>定义的成员要以函数形式调用</li><li>无缓存，调用一次执行一次</li></ul></li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">input</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">text</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">v-model</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">mathScore()</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> //methods的调用</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">input</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">text</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">v-model</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">sumScore1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">   //computer的调用</span></span>
<span class="line"></span></code></pre></div><h2 id="computed和watch的区别" tabindex="-1">computed和watch的区别 <a class="header-anchor" href="#computed和watch的区别" aria-hidden="true">#</a></h2><ul><li>computed 计算属性 : <ul><li>依赖其它属性值，并且 computed 的值有缓存，只有它依赖的属性值发生改变，下一次获取 computed 的值时才会重新计算 computed 的值。</li><li>不支持异步操作</li></ul></li><li>watch 侦听器 : <ul><li>允许执行异步操作</li><li>不支持缓存，数据变化时，就会触发相应的操作</li><li>监听的属性有三个配置：handle（newVal, oldVal）、immediate、deep（默认为false）</li></ul></li></ul><h2 id="v-show和v-if" tabindex="-1">v-show和v-if <a class="header-anchor" href="#v-show和v-if" aria-hidden="true">#</a></h2><ul><li>v-if因为直接操作dom节点增加和删除，切花换开销更大，会触发生命周期钩子</li><li>v-show只是简单的切换css，显示或者隐藏该元素，有更高的初始渲染消耗</li></ul><h2 id="spa单页面应用" tabindex="-1">spa单页面应用 <a class="header-anchor" href="#spa单页面应用" aria-hidden="true">#</a></h2><ul><li>把多个页面的内容和逻辑都放到一个主页面中，根据路由的变化替换对应的内容和逻辑</li><li>缺点：首屏加载慢，seo难度大</li></ul><h2 id="vue和传统项目开发的区别" tabindex="-1">vue和传统项目开发的区别 <a class="header-anchor" href="#vue和传统项目开发的区别" aria-hidden="true">#</a></h2><ol><li>传统项目的开发是直接操作dom的</li><li>vue开发基本不操作dom，使用指令系统，根据表达式得值改变响应式得作用于dom</li><li>vue的界面事件都是操作数据，界面的变动都是因为数据发生改变引起</li></ol><h2 id="父子组件的生命周期" tabindex="-1">父子组件的生命周期 <a class="header-anchor" href="#父子组件的生命周期" aria-hidden="true">#</a></h2><ol><li>渲染过程</li></ol><ul><li>父组件(beforeCreate) =&gt; 父组件(created) =&gt; 父组件(beforeMount) =&gt; 子组件(beforeCreate) =&gt; 子组件(created) =&gt; 子组件(beforeMount) =&gt; 子组件(mounted) =&gt; 父组件(mounted)</li></ul><ol start="2"><li>子组件更新过程</li></ol><ul><li>父组件(beforeUpdate) =&gt; 子组件(updated)</li></ul><ol start="3"><li>销毁过程 父组件(beforeDestroy) =&gt; 子组件(beforeDestroy) =&gt; 子组件(destroyed) =&gt; 父组件(destroyed)</li></ol><h2 id="组件间的通信方式" tabindex="-1">组件间的通信方式 <a class="header-anchor" href="#组件间的通信方式" aria-hidden="true">#</a></h2><ol><li>prop：父传子，子设置prop</li><li>$emit ：子传父，子通过 $emit 触发自定义事件</li><li>ref：父使用子时，在子组件中设置ref，父通过 <a href="http://this.$refs.xxx" target="_blank" rel="noreferrer">this.$refs.xxx</a> 获取数据</li><li>EventBus：兄弟传值，发送用$emit，接收用 $on</li><li>provide 与 inject：祖先provide，后代inject</li><li>vuex</li></ol><h2 id="什么是组件化开发-为什么使用组件化开发" tabindex="-1">什么是组件化开发？为什么使用组件化开发？ <a class="header-anchor" href="#什么是组件化开发-为什么使用组件化开发" aria-hidden="true">#</a></h2><ol><li>组件化开发就是把页面和处理页面的逻辑统一到一起实现开发的模式</li><li>降低代码耦合度，在接口不变的情况下，可以替换其他的组件使用</li><li>根据组件报错位置可以快速定位错误</li><li>便于维护。组件在项目中是复用的，对代码的优化可以让整个项目升级</li></ol><h2 id="vue-slot的传值" tabindex="-1">Vue slot的传值 <a class="header-anchor" href="#vue-slot的传值" aria-hidden="true">#</a></h2><ul><li>在子组件的插槽中中绑定一个属性，成为插槽prop，如</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">span</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">slot</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">v-bind</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">user</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">user</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">{{</span><span style="color:#A6ACCD;"> user.lastName </span><span style="color:#89DDFF;">}}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">slot</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">span</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><ul><li>在父级作用域中通过v-slot接收像这样：</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">v-slot</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">default</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">slotProps</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">{{</span><span style="color:#A6ACCD;"> slotProps.user.firstName </span><span style="color:#89DDFF;">}}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><h2 id="vue怎么做权限管理-控制到按钮级别的权限呢" tabindex="-1">vue怎么做权限管理，控制到按钮级别的权限呢？ <a class="header-anchor" href="#vue怎么做权限管理-控制到按钮级别的权限呢" aria-hidden="true">#</a></h2><ol><li>接口权限</li></ol><ul><li>采用jwt的形式来验证，axios拦截token，带上token发请求</li></ul><ol start="2"><li>按钮权限</li></ol><ul><li>v-if判断</li><li>通过自定义指令进行按钮权限判断</li></ul><ol start="3"><li>菜单权限</li></ol><ul><li>菜单又后台返回，前端定义路由信息，然后全局路由判断</li></ul><ol start="4"><li>路由权限</li></ol><ul><li>在路由上标记响应的权限信息，每次路由跳转前做校验</li></ul><h2 id="如何给spa做seo" tabindex="-1">如何给spa做seo <a class="header-anchor" href="#如何给spa做seo" aria-hidden="true">#</a></h2><ol><li>ssr服务端渲染：将组件通过服务器生成html在返回给浏览器</li><li>静态化：通过程序将动态页面抓取并保存为静态页面，这样页面存在于服务器的硬盘中</li></ol><h2 id="spa解决首屏加载慢" tabindex="-1">spa解决首屏加载慢 <a class="header-anchor" href="#spa解决首屏加载慢" aria-hidden="true">#</a></h2><ul><li>减小入口文件体积（动态加载路由）</li><li>静态资源本地缓存 <ul><li>后端返回资源问题： ⅰ. 采用HTTP缓存，设置Cache-Control，Last-Modified，Etag等响应头、 ⅱ. 采用Service Worker离线缓存</li><li>前端合理利用localStorage</li></ul></li><li>ui框架按需加载</li><li>图片资源的压缩（雪碧图或者在线字体图标）</li><li>组件重复打包</li><li>开启GZip压缩</li><li>使用ssr</li></ul><h2 id="组件data定义函数和对象的区别" tabindex="-1">组件data定义函数和对象的区别 <a class="header-anchor" href="#组件data定义函数和对象的区别" aria-hidden="true">#</a></h2><ul><li>根实例是单例所以可以是函数也可以是对象，不会产生数据污染</li><li>组件定义data必须是函数，防止多个实例对象共用一个data，产生数据污染</li><li>采用函数形式返回的是一个全新的data对象，不会指向同一个内存地址</li></ul><h2 id="vue中给对象添加新属性界面没反应" tabindex="-1">vue中给对象添加新属性界面没反应 <a class="header-anchor" href="#vue中给对象添加新属性界面没反应" aria-hidden="true">#</a></h2><ul><li>在已创建的实例上动态添加新的属性，不会通过Object.defineProperty设置成响应式数据.</li><li>解决办法： <ul><li>Vue.set()</li><li>Object.assign()</li><li>$forcecUpdated()：强制vue实例重新渲染</li></ul></li></ul><h2 id="vue中组件和插件的区别" tabindex="-1">vue中组件和插件的区别 <a class="header-anchor" href="#vue中组件和插件的区别" aria-hidden="true">#</a></h2><ul><li>页面和页面逻辑统一在一起的组件.vue文件都是组件</li><li>插件通常为vue添加全局功能，像vue-router的一些库</li><li>组件丰富项目的业务模块。插件增强vue的功能</li></ul><h2 id="nexttick" tabindex="-1">nextTick <a class="header-anchor" href="#nexttick" aria-hidden="true">#</a></h2><ul><li>vue在更新dom时是异步进行的，数据发生变化时，vue会开启一个异步更新队列等所有的数据变化完成之后，再进行统一更新</li><li>想要数据更改完之后立即得到更新的dom结构就可以使用</li></ul><h2 id="mixin" tabindex="-1">mixin <a class="header-anchor" href="#mixin" aria-hidden="true">#</a></h2><ul><li>在不同组件中需要用到一些相同或者相似的代码，就可以使用mixin</li></ul><h2 id="vue-observable" tabindex="-1">vue.observable <a class="header-anchor" href="#vue-observable" aria-hidden="true">#</a></h2><ul><li>让一个对象编程响应式数据，vue内部会用它来处理data返回的对象 怎么缓存当前组件？缓存后怎么更新？</li><li>用keep-alive缓存，会缓存不活动的组件实例，这样在组件切换过程中将状态保留在内存中，防⽌重复渲染 DOM。</li></ul><h2 id="缓存后有两种方案更新" tabindex="-1">缓存后有两种方案更新： <a class="header-anchor" href="#缓存后有两种方案更新" aria-hidden="true">#</a></h2><ul><li>beforeRouteEnter：在有vue-router的项⽬，每次进⼊路由的时候，都会执⾏ beforeRouteEnter</li><li>actived：在 keep-alive 缓存的组件被激活的时候，都会执⾏ actived 钩⼦</li></ul><h2 id="虚拟dom" tabindex="-1">虚拟dom <a class="header-anchor" href="#虚拟dom" aria-hidden="true">#</a></h2><ul><li>对真实dom的一种抽象，用js对象（VNode节点）作为基础的树，用对象的属性来描述节点，最终让这棵树映射到真实环境中</li><li>操作真实dom的代价是很昂贵的，虚拟dom不会立刻操作真实dom，而是将更新的内容保存到本地的js对象中，最终将这个js对象一次性映射到dom树上。</li></ul><h2 id="虚拟dom解析过程" tabindex="-1">虚拟dom解析过程： <a class="header-anchor" href="#虚拟dom解析过程" aria-hidden="true">#</a></h2><ul><li>首先对将要插入到文档中的 DOM 树结构进行分析，使用 js 对象将其表示出来，比如一个元素对象，包含 TagName、props 和 Children 这些属性。然后将这个 js 对象树给保存下来，最后再将 DOM 片段插入到文档中。</li><li>当页面的状态发生改变，需要对页面的 DOM 的结构进行调整的时候，首先根据变更的状态，重新构建起一棵对象树，然后将这棵新的对象树和旧的对象树进行比较，记录下两棵树的的差异。</li><li>最后将记录的有差异的地方应用到真正的 DOM 树中去，这样视图就更新了。</li></ul><h2 id="diff算法" tabindex="-1">diff算法 <a class="header-anchor" href="#diff算法" aria-hidden="true">#</a></h2><ul><li>通过同层的树节点进行比较的高效算法</li><li>在 vue 中，虚拟 dom 渲染成真实 dom 的新旧 VNode 节点比较就用到了diff算法</li><li>首先新老节点的开始和结束位置进行标记，然后进入循环寻找相同的节点，相同的就复用，再根据具体情况移动新老节点的索引，新老节点的索引都是从两边向中间靠拢，当新节点或者老节点的startIndex 大于 endIndex就结束循环，再根据新老节点的数目进行创建或移除</li></ul><h2 id="v-for循环中的key作用" tabindex="-1">v-for循环中的key作用 <a class="header-anchor" href="#v-for循环中的key作用" aria-hidden="true">#</a></h2><ul><li>在用 v-for 渲染列表的数据时，当数据量很大，我们还要对这个数据增删改的操作，如果给里边增加一条数据，整个列表就要重新渲染这样性能开销太大了。</li><li>key值就是尽可能避免这个问题，当我们列表修改时就会根据key值是否修改，是则重新渲染，否则就地复用。</li><li>一般不推荐使用索引作为key值，应该给每一个项一个固定的id</li></ul>`,61);function u(e,h,v,D,y,F){return o(),s("div",null,[l("h1",p,[i(t(e.$frontmatter.title)+" ",1),d]),c])}const g=a(r,[["render",u]]);export{f as __pageData,g as default};
