import{_ as s,c as l,o as a,d as n}from"./app.eff202be.js";const A=JSON.parse('{"title":"web安全相关","description":"","frontmatter":{},"headers":[{"level":2,"title":"xss(Cross-Site Scripting，跨站脚本攻击)","slug":"xss-cross-site-scripting-跨站脚本攻击","link":"#xss-cross-site-scripting-跨站脚本攻击","children":[]},{"level":2,"title":"CSRF（跨站点请求伪造）攻击","slug":"csrf-跨站点请求伪造-攻击","link":"#csrf-跨站点请求伪造-攻击","children":[]},{"level":2,"title":"跨域","slug":"跨域","link":"#跨域","children":[]}],"relativePath":"浏览器原理/web安全.md"}'),o={name:"浏览器原理/web安全.md"},p=n(`<h1 id="web安全相关" tabindex="-1">web安全相关 <a class="header-anchor" href="#web安全相关" aria-hidden="true">#</a></h1><h2 id="xss-cross-site-scripting-跨站脚本攻击" tabindex="-1">xss(Cross-Site Scripting，跨站脚本攻击) <a class="header-anchor" href="#xss-cross-site-scripting-跨站脚本攻击" aria-hidden="true">#</a></h2><h5 id="xss是什么" tabindex="-1">xss是什么？ <a class="header-anchor" href="#xss是什么" aria-hidden="true">#</a></h5><ul><li>本质是：恶意代码未经过滤，和正常的代码混在一起，浏览器无法分辨那些脚本是可信的，恶意代码被执行。由于直接在用户的终端执行，恶意代码能够直接获取用户的信息，利用这些信息冒充用户向网站发起攻击者定义的请求。</li></ul><h5 id="xss的分类" tabindex="-1">xss的分类 <a class="header-anchor" href="#xss的分类" aria-hidden="true">#</a></h5><ol><li>反射性xss（非持久） <ul><li>攻击者把恶意脚本写在url中，引导用户点击。正常服务端获取到恶意脚本返回（ 有些页面会直接把url的参数展现在页面某个地方 ），浏览器解析执行js造成攻击。</li><li>防范：尽量使用post请求，但是post请求不一定是安全的，攻击者也可以利用ifame加form标签提交表单实现xss攻击，对url的查询参数进行转义后再返回浏览器</li></ul></li><li>存储型xss（持久） <ul><li>攻击者在输入框（比如评论区）中写入恶意脚本发送给服务端，服务端存了恶意脚本在数据库中，用户访问这个有评论区的页面时，服务端会返回攻击者写的恶意脚本，浏览器解析执行，实现攻击。</li><li>防范：前端数据发送前先转义，服务端存入数据库前先转义，前端接收数据前先转义</li></ul></li><li>dom型xss <ul><li>前端有时候会使用一些api把用户的输入插入到页面中，如果用户输入的html有恶意脚本就会造成攻击；如.innerHTML、.outerHTML、.appendChild、document.write()等API</li><li>防范：对输入内容进行转义，尽量使用.innerText、.textContent、.setAttribute() 等</li></ul></li></ol><ul><li>防范的原则就是不要相信用户输入的一切内容： <ul><li>对cookie设置 http only： 不让 js 获取 cookie，只能是 http 才能获取</li><li>对一些输入框做限制</li></ul></li></ul><h2 id="csrf-跨站点请求伪造-攻击" tabindex="-1">CSRF（跨站点请求伪造）攻击 <a class="header-anchor" href="#csrf-跨站点请求伪造-攻击" aria-hidden="true">#</a></h2><h4 id="攻击流程" tabindex="-1">攻击流程 <a class="header-anchor" href="#攻击流程" aria-hidden="true">#</a></h4><ul><li>A 页面登录获取了 cookie， B 页面以一些方式给 A 页面服务器发送一个恶意请求，默认携带 cookie；造成攻击 <ul><li>因为不同页面，如果访问了同一个服务器，就能共享 cookie （浏览器这样做为了不同标签页登录状态统一）</li></ul></li></ul><h4 id="csrf的预防" tabindex="-1">CSRF的预防 <a class="header-anchor" href="#csrf的预防" aria-hidden="true">#</a></h4><ol><li>使用token，让用户的每次请求都携带token（攻击者无法获取到token）</li><li>通过设置cookie属性 <code>Samesite：Strict</code> Cookie只能由与发出Cookie的网站相同的网站进行访问</li></ol><h2 id="跨域" tabindex="-1">跨域 <a class="header-anchor" href="#跨域" aria-hidden="true">#</a></h2><ul><li>跨域是因为浏览器的同源策略，浏览器阻止客户端和服务端通信的问题</li><li>请求跨域了，请求还是会正常发出，服务端也会正常返回结果，只是结果会被浏览器拦截。</li></ul><h5 id="同源策略" tabindex="-1">同源策略 <a class="header-anchor" href="#同源策略" aria-hidden="true">#</a></h5><ul><li>协议、域名、端口三者都要相同，即使不同的两个域名指向的是同一个ip地址也是非同源，</li><li>主要限制三方面： <ul><li>当前域的 js 脚本不能访问其它域下的 cookie、localstorage和 indexDB</li><li>当前域下的 js 脚本不能够操作访问其它域下的 Dom</li><li>当前域下的 ajax 不能跨域请求</li></ul></li></ul><ul><li>同源策略的目的是为了保证用户的信息安全，是对 js 脚本的一种限制，而不是对浏览器的限制</li></ul><h5 id="解决方案" tabindex="-1">解决方案 <a class="header-anchor" href="#解决方案" aria-hidden="true">#</a></h5><ul><li>JSONP（JSON with padding） <ul><li>因为对于一般的 img、script、link 脚本请求都不会有跨域的限制，所以可以通过创建script ，请求一个带参网址实现跨域，后端获取前端声明的回调函数 handleCallback ，并调用执行的方式返回给前端</li><li>优点：兼容性好</li><li>缺点：仅支持 get 请求，可能会遭到 xss 攻击</li></ul></li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">//前端代码</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">text/javascript</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    let script = document.createElement(&#39;script&#39;)</span></span>
<span class="line"><span style="color:#A6ACCD;">    script.type = &#39;text/javascript&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">    script.src = &#39;http://www.domain.com/login?user=admin&amp;callback=handleCallback&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">    document.head.appendChild(script)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    function handleCallback(res) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">         console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(res);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//后端代码</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> Koa </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">koa</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> fs </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">fs</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> app </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Koa</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">use</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">ctx</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">next</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">ctx</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">path</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/api/jsonp</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">callback</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">user</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ctx</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">query</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">ctx</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">body</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">\`\${</span><span style="color:#A6ACCD;">callback</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">(</span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">JSON</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">stringify</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> msg </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">)</span><span style="color:#89DDFF;">\`</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">listen</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">8080</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><ul><li>CORS <ul><li>服务端设置Acess-Control-Allow-origin ，表示可以接收那些域名可以访问资源</li><li>cors又有 简单请求 和 复杂请求</li></ul></li><li>Nginx反向代理</li></ul>`,21),e=[p];function t(c,r,i,D,y,F){return a(),l("div",null,e)}const d=s(o,[["render",t]]);export{A as __pageData,d as default};
