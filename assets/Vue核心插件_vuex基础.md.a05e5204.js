import{_ as n,c as l,a as s,b as t,t as e,d as o,o as p}from"./app.ee3a1b70.js";const m=JSON.parse('{"title":"Vuex---Vue的状态管理库","description":"","frontmatter":{"title":"Vuex---Vue的状态管理库","categories":["Vuex"],"tags":["vuex"]},"headers":[{"level":2,"title":"what vuex?","slug":"what-vuex","link":"#what-vuex","children":[]},{"level":2,"title":"why vuex?","slug":"why-vuex","link":"#why-vuex","children":[]},{"level":2,"title":"核心流程","slug":"核心流程","link":"#核心流程","children":[]},{"level":2,"title":"action","slug":"action","link":"#action","children":[]},{"level":2,"title":"mutation","slug":"mutation","link":"#mutation","children":[]},{"level":2,"title":"state","slug":"state","link":"#state","children":[]},{"level":2,"title":"getter","slug":"getter","link":"#getter","children":[]},{"level":2,"title":"module","slug":"module","link":"#module","children":[]},{"level":2,"title":"vuex 和 localstorage的区别","slug":"vuex-和-localstorage的区别","link":"#vuex-和-localstorage的区别","children":[]}],"relativePath":"Vue核心插件/vuex基础.md"}'),r={name:"Vue核心插件/vuex基础.md"},c={id:"frontmatter-title",tabindex:"-1"},i=s("a",{class:"header-anchor",href:"#frontmatter-title","aria-hidden":"true"},"#",-1),F=o(`<h2 id="what-vuex" tabindex="-1">what vuex? <a class="header-anchor" href="#what-vuex" aria-hidden="true">#</a></h2><ul><li>专门用于存储管理所有组件的状态的库，简单来说就是用来管理项目组件需要共享的一些数据的容器</li></ul><h2 id="why-vuex" tabindex="-1">why vuex? <a class="header-anchor" href="#why-vuex" aria-hidden="true">#</a></h2><ul><li>如果一个项目由众多组件组成，组件又会多层嵌套，这些组件如果同时共享一个状态或者需要不同的组件需要更改同一个状态时。利用传参的方法很容易造成数据混乱，难以维护。</li><li>vuex通过把不同组件的共享状态抽取出来，以全局单例模式进行管理，不管组件在哪里都可以获取或者更改状态。对状态统一管理有利于我们后期项目的维护。</li><li>使用vuex并不是要把所有组件的所有状态放到vuex中，否则用以导致store中的当代码太臃肿不直观。有些数据不用共享还是作为组件的局部数据更好。</li></ul><h2 id="核心流程" tabindex="-1">核心流程 <a class="header-anchor" href="#核心流程" aria-hidden="true">#</a></h2><ul><li>组件通过 <strong>（this.$store.dispatch）</strong> 触发 Actions 中的一些事件或动作</li><li>Actions 通过 <strong>（this.$store.commit）</strong> 触发 Mutations 中的事件</li><li>Mutations 中的事件就去改变 State 中的数据</li><li>State 中的数据被改变之后，就会重新渲染（Render）到 Vue Components 中去，组件展示更新后的数据，完成一个流程。</li></ul><hr><p>💥 <strong>Vuex的核心模块</strong></p><h2 id="action" tabindex="-1">action <a class="header-anchor" href="#action" aria-hidden="true">#</a></h2><ul><li>通过 <strong>（this.$store.commit）</strong> 触发 Mutations 中的事件</li><li>进行异步操作，不能直接操作 state 如向后台请求数据</li></ul><h2 id="mutation" tabindex="-1">mutation <a class="header-anchor" href="#mutation" aria-hidden="true">#</a></h2><ul><li>更改 Vuex 的 store 中的数据的唯一方法是提交 mutation，其他修改方式在严格模式下将会报错。</li><li>利用mapMutations辅助函数可以在组件中重复使用 mutation</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">methods</span><span style="color:#89DDFF;">:{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">...</span><span style="color:#82AAFF;">mapMutations</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        setNumber</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">SET_NUMBER</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 然后调用this.setNumber(10)相当调用this.$store.commit(&#39;SET_NUMBER&#39;,10)</span></span>
<span class="line"></span></code></pre></div><ul><li>该方法只能进行同步操作</li></ul><p>❓ <strong>为什么只能进行同步操作</strong></p><ul><li>每一次mutation触发的时候，devtools 都需要捕捉前后数据的改变，但是如果在 mutation 中进行了异步操作，devtools不知道回调函数什么时候回调，追踪不到状态的改变</li></ul><h2 id="state" tabindex="-1">state <a class="header-anchor" href="#state" aria-hidden="true">#</a></h2><ul><li>集中存储组件中data对象的数据，全局唯一，以进行统一的状态管理。</li><li>在组件中可以通过 <strong>this.$store</strong> 访问</li><li>如果在一个组件中用了多个状态，可以利用 <strong>mapState</strong> 辅助函数来帮助生成计算属性</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 不用mapstate写法</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">computed</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">currentPage</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#82AAFF;">get</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">$store</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">state</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">adminManage</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">currentPage</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 没用set时可简化写法</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">currentPage</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">state</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">$store</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">state</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">adminManage</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">currentPage</span></span>
<span class="line"><span style="color:#89DDFF;">},</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 用mapstate写法，第一个参数是映射到对应的仓库</span></span>
<span class="line"><span style="color:#FFCB6B;">computed</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">mapState</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">adminManage</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,{</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#82AAFF;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">state</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">$store</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">state</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">adminManage</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">user_num</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">                </span><span style="color:#676E95;font-style:italic;">// 传字符串参数 &#39;user_num&#39; 等同于 \`state =&gt; this.$store.state.adminManage.user_num\`</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#F07178;">ID</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">user_num</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">         </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 和其他对象混合写</span></span>
<span class="line"><span style="color:#FFCB6B;">computed</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">currentPage</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#82AAFF;">get</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">$store</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">state</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">adminManage</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">currentPage</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#82AAFF;">set</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">val</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">val</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 因为mapState返回的是一个对象，使用对象展开运算符将此对象混入到外部对象中使用</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 当映射的计算属性的名称与 state 的子节点名称相同时，可以写成数组</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">...</span><span style="color:#82AAFF;">mapState</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">adminManage</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> [</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">tableData</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">totalNum</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">show</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">pageSize</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">])</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="getter" tabindex="-1">getter <a class="header-anchor" href="#getter" aria-hidden="true">#</a></h2><ul><li>类似于 computed 属性，可以对state中的数据进行处理</li><li>mapGetters 辅助函数可以 store 中的 getter 映射到组件的计算属性</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;">...</span><span style="color:#82AAFF;">mapGetters</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">adminManage</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">screenAdmin</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">])</span></span>
<span class="line"></span></code></pre></div><ul><li>可以通过属性形式访问到这些属性，如：</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">computed</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">doneTodosCount</span><span style="color:#F07178;"> () </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">$store</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">getters</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">doneTodosCount</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="module" tabindex="-1">module <a class="header-anchor" href="#module" aria-hidden="true">#</a></h2><p>💥 为什么使用module？</p><ul><li>在Vuex中应用的所有需要共享和被修改的数据源都存放在state对象中，当应用较为复杂，需要共享的数据较多时，state对象以及store对象都会变得很臃肿，不利于代码维护。</li><li>并且大多应用都会根据业务分为不同的功能模块，很多情况下不同模块之间的数据交互并不密切，如果我们能将store也分割为不同模块，每个模块管理不同的数据，会使数据管理起来更加结构清晰，方便管理。</li></ul><p>💥 命名空间 namespaced</p><ul><li><p>默认情况下，模块内部的action、mutation和getter是注册在全局命名空间的，这样使得多个模块能够对同一mutation或action做出响应。</p></li><li><p>如果我们想让我们的模块具有更高的封装度和复用性，可以通过添加namespaced: true的方式使其成为带命名空间的模块。当模块被注册后，他的所有getter、action及matation都会自动根据模块注册的路径调整命名</p></li></ul><h2 id="vuex-和-localstorage的区别" tabindex="-1">vuex 和 localstorage的区别 <a class="header-anchor" href="#vuex-和-localstorage的区别" aria-hidden="true">#</a></h2><table><thead><tr><th></th><th>vuex</th><th>localstorage</th></tr></thead><tbody><tr><td>存储位置</td><td>内存</td><td>本地</td></tr><tr><td>使用场景</td><td>组件间</td><td>不同页面中</td></tr><tr><td>其他</td><td>数据响应式，刷新页面数据会丢失</td><td>非响应式，刷新页面数据不会丢失</td></tr></tbody></table>`,31);function y(a,D,u,d,h,C){return p(),l("div",null,[s("h1",c,[t(e(a.$frontmatter.title)+" ",1),i]),F])}const g=n(r,[["render",y]]);export{m as __pageData,g as default};
