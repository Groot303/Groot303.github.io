import{_ as s,c as n,o as l,d as e}from"./app.89aea504.js";const u=JSON.parse('{"title":"代码质量和代码格式","description":"","frontmatter":{},"headers":[{"level":3,"title":"问题背景","slug":"问题背景","link":"#问题背景","children":[]},{"level":3,"title":"ESlint","slug":"eslint","link":"#eslint","children":[]},{"level":3,"title":"Prettier","slug":"prettier","link":"#prettier","children":[]},{"level":3,"title":"ESlint + Prettier","slug":"eslint-prettier","link":"#eslint-prettier","children":[]},{"level":3,"title":"关于 .eslintrc 和 .prettierrc 文件","slug":"关于-eslintrc-和-prettierrc-文件","link":"#关于-eslintrc-和-prettierrc-文件","children":[]},{"level":3,"title":"其他问题","slug":"其他问题","link":"#其他问题","children":[]}],"relativePath":"项目搭建/eslint和prettier.md"}'),a={name:"项目搭建/eslint和prettier.md"},t=e(`<h1 id="代码质量和代码格式" tabindex="-1">代码质量和代码格式 <a class="header-anchor" href="#代码质量和代码格式" aria-hidden="true">#</a></h1><h3 id="问题背景" tabindex="-1">问题背景 <a class="header-anchor" href="#问题背景" aria-hidden="true">#</a></h3><ul><li>在团队协作的过程中，由于每个开发人员编写代码的习惯或者使用的代码编辑器不同，很大可能会造成整个团队的代码风格不一致，导致在代码合并的时候需要修改大量代码的格式，对协同开发很不友好</li></ul><h3 id="eslint" tabindex="-1">ESlint <a class="header-anchor" href="#eslint" aria-hidden="true">#</a></h3><h5 id="eslint-解决的问题" tabindex="-1">ESlint 解决的问题 <a class="header-anchor" href="#eslint-解决的问题" aria-hidden="true">#</a></h5><ol><li>代码质量问题：某些使用方式的问题</li><li>代码风格问题：风格不符合一定的规则</li></ol><ul><li>以上问题都可以通过配置 .eslintrc 文件统一</li></ul><p>💥 但是，有非常多的格式问题不可能做到全部一一配置，所以有些公司提出了自己公司的标准，如：Airbnb；通过配置就可以使用他们的规范了</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// .eslintrc </span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">extends</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">: [</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">airban</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h5 id="eslint-存在的问题" tabindex="-1">ESlint 存在的问题 <a class="header-anchor" href="#eslint-存在的问题" aria-hidden="true">#</a></h5><ul><li>eslint 更注重的是代码的质量，防止代码出现 bug， 其次才是代码规范，在一些代码风格上可能没有规范；而且无法格式化 html、css等文件</li></ul><h3 id="prettier" tabindex="-1">Prettier <a class="header-anchor" href="#prettier" aria-hidden="true">#</a></h3><ul><li>prettier很好地解决了代码规范的问题，而且可以格式化html、css等文件</li></ul><h3 id="eslint-prettier" tabindex="-1">ESlint + Prettier <a class="header-anchor" href="#eslint-prettier" aria-hidden="true">#</a></h3><ul><li>使用这两者的组合可以很好的解决代码质量和代码格式的问题</li></ul><h5 id="存在问题" tabindex="-1">存在问题 <a class="header-anchor" href="#存在问题" aria-hidden="true">#</a></h5><ul><li>两者一起使用的时候可能会存在冲突，为了解决这个问题，可以在eslint配置文件中配置以下规则：</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// .eslintrc </span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">extends</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">:  [</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">plugin:prettier/recommended</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><ul><li>以上配置相当于把 prettie 推荐的格式问题配置以 eslint rules 的方式写入，简单的说我们希望报错的是 eslint，而修改格式的是 prettier</li></ul><h5 id="配合vscode插件使用" tabindex="-1">配合vscode插件使用 <a class="header-anchor" href="#配合vscode插件使用" aria-hidden="true">#</a></h5><ul><li>如果不是用则需要使用命令来对代码进行检查</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// eslint 检查代码</span></span>
<span class="line"><span style="color:#A6ACCD;">eslint xxx</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// eslint 自动修复代码</span></span>
<span class="line"><span style="color:#A6ACCD;">eslint </span><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">fix xxx</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// prettier 格式化代码</span></span>
<span class="line"><span style="color:#A6ACCD;">prettier </span><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">write xxx</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js</span></span>
<span class="line"></span></code></pre></div><ul><li>使用 vscode 的 ESLint 和 Prettier 插件的话，vscode 会在你编写代码的时候报错或者发出警告</li></ul><h3 id="关于-eslintrc-和-prettierrc-文件" tabindex="-1">关于 .eslintrc 和 .prettierrc 文件 <a class="header-anchor" href="#关于-eslintrc-和-prettierrc-文件" aria-hidden="true">#</a></h3><ul><li><p>以 vscode 为例，如果有这两个文件，并且设置了ctrl s 自动保存，那么ctrl s 时，会以这两个文件为标准来进行格式化；总之，如果有格式配置的文件，会以项目配置文件为主，没有则使用 setting.json 中的配置</p></li><li><p>因为无法保证所有协同开发的 coder 都使用同一个编译器和插件，所以尽量要编写这两个文件，以这两个文件的配置为标准</p></li></ul><h3 id="其他问题" tabindex="-1">其他问题 <a class="header-anchor" href="#其他问题" aria-hidden="true">#</a></h3><ul><li>为了以防万一，可以添加一个 pre-commit 钩子，确保没有通过 lint 的代码不能提交</li></ul><h5 id="添加pre-commit钩子步骤" tabindex="-1">添加pre-commit钩子步骤 <a class="header-anchor" href="#添加pre-commit钩子步骤" aria-hidden="true">#</a></h5><p>在协同项目开发中，你可以使用 Git 钩子（Git hooks）中的 <code>pre-commit</code> 钩子来确保在提交代码之前运行 lint 检查，并防止提交不符合规范的代码。以下是添加 <code>pre-commit</code> 钩子的一般步骤：</p><ol><li><p><strong>进入项目目录</strong>：首先，进入你的协同项目的根目录，确保你在项目目录中工作。</p></li><li><p><strong>创建 pre-commit 钩子脚本文件</strong>：在项目目录下，创建一个名为 <code>.git/hooks/pre-commit</code> 的文件，这是 Git <code>pre-commit</code> 钩子的脚本文件。如果 <code>.git/hooks</code> 目录下还没有 <code>pre-commit</code> 文件，请创建一个。</p></li><li><p><strong>编辑 pre-commit 钩子脚本</strong>：使用文本编辑器打开 <code>.git/hooks/pre-commit</code> 文件，并在其中添加以下内容：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">#!/bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 运行 lint 检查命令，例如 eslint</span></span>
<span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">lint</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 获取上一条命令的返回值</span></span>
<span class="line"><span style="color:#A6ACCD;">LINT_RESULT</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">$?</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 如果 lint 检查失败，阻止提交</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;"> $LINT_RESULT </span><span style="color:#89DDFF;">-ne</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">];</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Lint 检查失败，请修复代码后再次提交。</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">exit</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">fi</span></span>
<span class="line"></span></code></pre></div><p>这个脚本会运行你的 lint 检查命令（例如 <code>npm run lint</code>），并根据 lint 的返回值来决定是否允许提交。如果 lint 检查失败，脚本会输出错误消息并阻止提交。</p></li><li><p><strong>使 pre-commit 钩子脚本可执行</strong>：在编辑完 <code>pre-commit</code> 钩子脚本后，确保它具有执行权限。你可以使用以下命令来赋予它执行权限：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">chmod</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">+x</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">.git/hooks/pre-commit</span></span>
<span class="line"></span></code></pre></div></li><li><p><strong>测试钩子</strong>：现在，你可以尝试提交代码并查看是否会触发 <code>pre-commit</code> 钩子。如果 lint 检查失败，提交将被阻止。</p></li></ol><p>请确保你的项目中已经配置了适当的 lint 检查工具（例如 ESLint），并且已经设置了正确的 lint 脚本（例如 <code>npm run lint</code>）。此外，根据你的项目需要，你可以自定义 <code>pre-commit</code> 钩子脚本来适应特定的 lint 配置和工作流程。</p>`,31),p=[t];function i(o,r,c,d,h,y){return l(),n("div",null,p)}const C=s(a,[["render",i]]);export{u as __pageData,C as default};
