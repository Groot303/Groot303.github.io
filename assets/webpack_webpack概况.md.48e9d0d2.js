import{_ as e,c as a,o as i,d as l}from"./app.eb5477ea.js";const b=JSON.parse('{"title":"webpack 概况","description":"","frontmatter":{},"headers":[{"level":2,"title":"出现背景","slug":"出现背景","link":"#出现背景","children":[]},{"level":2,"title":"编译打包流程","slug":"编译打包流程","link":"#编译打包流程","children":[]}],"relativePath":"webpack/webpack概况.md"}'),t={name:"webpack/webpack概况.md"},r=l('<h1 id="webpack-概况" tabindex="-1">webpack 概况 <a class="header-anchor" href="#webpack-概况" aria-hidden="true">#</a></h1><h2 id="出现背景" tabindex="-1">出现背景 <a class="header-anchor" href="#出现背景" aria-hidden="true">#</a></h2><ul><li>在开发环境中，我们编写代码需要模块化，还需要用到框架或者新的语言特性等。</li><li>浏览器不支持模块化，切不认识一些高级的 js 特性，人工编译不太现实，所以 webpack 的出现可以帮助我们很好地解决代码的模块依赖、ES转义等问题</li></ul><h2 id="编译打包流程" tabindex="-1">编译打包流程 <a class="header-anchor" href="#编译打包流程" aria-hidden="true">#</a></h2><ul><li>webpack 的作用是把所有的 js 文件打包成一个 bundlejs 文件 <ol><li>根据配置文件找到 入口 和 出口</li><li>根据入口把 js 文件转成 AST ，并根据 import 收集依赖</li><li>把 ES6 转成 ES5</li><li>不断循环 2.3 步骤最后形成文件依赖图</li><li>处理依赖图：自定义 exports 对象和 require 方法</li><li>输出打包后的文件</li></ol></li></ul>',5),c=[r];function s(n,d,o,_,h,p){return i(),a("div",null,c)}const k=e(t,[["render",s]]);export{b as __pageData,k as default};
